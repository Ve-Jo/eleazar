datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Guild {
  id       String @id @map("guild_id")
  settings Json   @default("{}")
  users    User[]

  @@map("guilds")
}

model User {
  id           String  @id @map("user_id")
  guildId      String  @map("guild_id")
  bannerUrl    String? @map("banner_url")
  lastActivity BigInt  @default(0) @map("last_activity")

  // Relations
  guild     Guild       @relation(fields: [guildId], references: [id], onDelete: Cascade)
  economy   Economy?
  stats     Statistics?
  cooldowns Cooldown?
  upgrades  Upgrade[]
  Level     Level?
  VoiceSession VoiceSession?
  crates    Crate[]    // Add relation to Crates

  @@unique([guildId, id])
  @@index([guildId])
  @@index([lastActivity])
  @@map("users")
}

// Frequently accessed economy data
model Economy {
  id            String  @id @default(cuid())
  userId        String
  guildId       String
  balance       Decimal @default(0) @db.Decimal(10, 5)
  bankBalance   Decimal @default(0) @db.Decimal(10, 5)
  bankRate      Decimal @default(0) @db.Decimal(10, 5)
  bankStartTime BigInt  @default(0)
  // Change from Json to Decimal
  upgradeDiscount Decimal @default(0) @db.Decimal(5, 2) @map("upgrade_discount") // Single discount value as percentage
  user          User    @relation(fields: [userId, guildId], references: [id, guildId], onDelete: Cascade)

  @@unique([userId, guildId])
  @@index([userId])
  @@index([guildId])
  @@map("economy")
}

// Level tracking
model Level {
  id       String @id @default(cuid())
  userId   String @map("user_id")
  guildId  String @map("guild_id")
  xp       BigInt @default(0)
  gameXp   BigInt @default(0)
  seasonXp BigInt @default(0) @map("season_xp")

  // Relations
  user User @relation(fields: [userId, guildId], references: [id, guildId], onDelete: Cascade)

  @@unique([userId, guildId])
  @@index([xp])
  @@index([gameXp])
  @@index([seasonXp])
  @@map("levels")
}

// Statistics for tracking all counters and metrics
model Statistics {
  id           String  @id @default(cuid())
  userId       String  @map("user_id")
  guildId      String  @map("guild_id")
  totalEarned  Decimal @default(0) @map("total_earned") @db.Decimal(20, 5)
  messageCount Int     @default(0) @map("message_count")
  commandCount Int     @default(0) @map("command_count")
  voiceTime    BigInt  @default(0) @map("voice_time") // Added field for voice time tracking in milliseconds
  lastUpdated  BigInt  @default(0) @map("last_updated")
  gameRecords  Json    @default("{\"2048\": {\"highScore\": 0}, \"snake\": {\"highScore\": 0}}") @map("game_records")
  // Detailed XP tracking
  xpStats      Json    @default("{\"chat\": 0, \"voice\": 0}") @map("xp_stats")
  gameXpStats  Json    @default("{\"snake\": 0, \"2048\": 0}") @map("game_xp_stats")
  interactionStats Json @default("{\"commands\":{}, \"buttons\":{}, \"selectMenus\":{}, \"modals\":{}}") @map("interaction_stats")

  // Relations
  user User @relation(fields: [userId, guildId], references: [id, guildId], onDelete: Cascade)

  @@unique([userId, guildId])
  @@index([totalEarned])
  @@index([messageCount])
  @@index([commandCount])
  @@map("statistics")
}

// Cooldowns table for frequent updates
model Cooldown {
  id      String @id @default(cuid())
  userId  String @map("user_id")
  guildId String @map("guild_id")
  data    Json   @default("{}") // Stores all cooldown timestamps

  // Relations
  user User @relation(fields: [userId, guildId], references: [id, guildId], onDelete: Cascade)

  @@unique([userId, guildId])
  @@map("cooldowns")
}

// Upgrades table for frequent access
model Upgrade {
  id      String @id @default(cuid())
  userId  String @map("user_id")
  guildId String @map("guild_id")
  type    String // "daily" or "crime"
  level   Int    @default(1)

  // Relations
  user User @relation(fields: [userId, guildId], references: [id, guildId], onDelete: Cascade)

  @@unique([userId, guildId, type])
  @@index([type])
  @@map("upgrades")
}

model Analytics {
  id        Int    @id @default(autoincrement())
  timestamp BigInt @default(0)
  type      String // "ping", "economy", etc.
  data      Json // Flexible storage for different metric types

  @@index([timestamp])
  @@index([type])
  @@map("analytics")
}

model MusicPlayer {
  id             String   @id @map("guild_id") // Discord guild ID
  voiceChannelId String   @map("voice_channel_id") // Voice channel the bot is connected to
  textChannelId  String   @map("text_channel_id") // Text channel for player messages 
  queue          Json     @default("[]") @map("queue") // Current queue of tracks
  currentTrack   Json?    @map("current_track") // Currently playing track
  position       Int      @default(0) @map("position") // Current position in the track (ms)
  volume         Int      @default(100) @map("volume")
  repeatMode     String   @default("off") @map("repeat_mode") // off, track, or queue
  autoplay       Boolean  @default(false) @map("autoplay")
  filters        Json     @default("{}") @map("filters") // Active audio filters
  lastUpdated    DateTime @updatedAt @map("last_updated")

  @@map("music_players")
}

model Seasons {
  id          String @id @default("current")
  seasonEnds  BigInt @map("season_ends")
  seasonNumber Int    @default(1) @map("season_number")
  
  @@map("seasons")
}

model VoiceSession {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  guildId         String   @map("guild_id")
  channelId       String   @map("channel_id")
  joinedAt        BigInt   @map("joined_at")
  user            User     @relation(fields: [userId, guildId], references: [id, guildId], onDelete: Cascade)

  @@unique([userId, guildId])
  @@index([channelId])
  @@index([joinedAt])
  @@map("voice_sessions")
}

// New model for crates
model Crate {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  guildId     String   @map("guild_id")
  type        String   // "daily", "weekly", "special", etc.
  count       Int      @default(1)
  properties  Json     @default("{}")  // For special properties like rarity, custom rewards, etc.
  acquired    BigInt   @default(0)     // When the crate was acquired

  // Relations
  user User @relation(fields: [userId, guildId], references: [id, guildId], onDelete: Cascade)

  @@unique([userId, guildId, type])
  @@index([type])
  @@map("crates")
}
