datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Guild {
  id        String   @id @map("guild_id")
  settings  Json     @default("{}")
  users     User[]

  @@map("guilds")
}

model User {
  id           String   @id @map("user_id")
  guildId      String   @map("guild_id")
  bannerUrl    String?  @map("banner_url")
  lastActivity BigInt   @map("last_activity") @default(0)
  
  // Relations
  guild        Guild    @relation(fields: [guildId], references: [id], onDelete: Cascade)
  economy      Economy?
  level        Level?
  stats        Statistics?
  cooldowns    Cooldown?
  upgrades     Upgrade[]

  @@unique([guildId, id])
  @@index([guildId])
  @@index([lastActivity])
  @@map("users")
}

// Frequently accessed economy data
model Economy {
  id          String   @id @default(cuid())
  userId      String
  guildId     String
  balance     Decimal  @default(0) @db.Decimal(10, 5)
  bankBalance Decimal  @default(0) @db.Decimal(10, 5)
  bankRate    Decimal  @default(0) @db.Decimal(10, 5)
  bankStartTime BigInt  @default(0)
  user        User     @relation(fields: [userId, guildId], references: [id, guildId], onDelete: Cascade)

  @@unique([userId, guildId])
  @@index([userId])
  @@index([guildId])
  @@map("economy")
}

// Statistics for tracking all counters and metrics
model Statistics {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  guildId      String   @map("guild_id")
  totalEarned  Decimal  @map("total_earned") @db.Decimal(20, 5) @default(0)
  messageCount Int      @map("message_count") @default(0)
  commandCount Int      @map("command_count") @default(0)
  lastUpdated  BigInt   @map("last_updated") @default(0)

  // Relations
  user         User     @relation(fields: [userId, guildId], references: [id, guildId], onDelete: Cascade)

  @@unique([userId, guildId])
  @@index([totalEarned])
  @@index([messageCount])
  @@index([commandCount])
  @@map("statistics")
}

// Frequently accessed level data
model Level {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  guildId      String   @map("guild_id")
  xp           BigInt   @default(0)
  
  // Relations
  user         User     @relation(fields: [userId, guildId], references: [id, guildId], onDelete: Cascade)

  @@unique([userId, guildId])
  @@index([xp])
  @@map("levels")
}

// Cooldowns table for frequent updates
model Cooldown {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  guildId      String   @map("guild_id")
  data         Json     @default("{}")  // Stores all cooldown timestamps
  
  // Relations
  user         User     @relation(fields: [userId, guildId], references: [id, guildId], onDelete: Cascade)

  @@unique([userId, guildId])
  @@map("cooldowns")
}

// Upgrades table for frequent access
model Upgrade {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  guildId      String   @map("guild_id")
  type         String   // "daily" or "crime"
  level        Int      @default(1)
  
  // Relations
  user         User     @relation(fields: [userId, guildId], references: [id, guildId], onDelete: Cascade)

  @@unique([userId, guildId, type])
  @@index([type])
  @@map("upgrades")
}

model Analytics {
  id           Int      @id @default(autoincrement())
  timestamp    BigInt   @default(0)
  type         String   // "ping", "economy", etc.
  data         Json     // Flexible storage for different metric types

  @@index([timestamp])
  @@index([type])
  @@map("analytics")
}

model MusicPlayer {
  id              String   @id @map("guild_id") // Discord guild ID
  voiceChannelId  String   @map("voice_channel_id") // Voice channel the bot is connected to
  textChannelId   String   @map("text_channel_id") // Text channel for player messages 
  queue           Json     @map("queue") @default("[]") // Current queue of tracks
  currentTrack    Json?    @map("current_track") // Currently playing track
  position        Int      @map("position") @default(0) // Current position in the track (ms)
  volume          Int      @map("volume") @default(100)
  repeatMode      String   @map("repeat_mode") @default("off") // off, track, or queue
  autoplay        Boolean  @map("autoplay") @default(false)
  filters         Json     @map("filters") @default("{}")   // Active audio filters
  lastUpdated     DateTime @map("last_updated") @updatedAt

  @@map("music_players")
}
