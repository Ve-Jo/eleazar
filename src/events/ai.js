import {
  Events,
  StringSelectMenuBuilder,
  ButtonBuilder,
  ActionRowBuilder,
  ComponentType,
  InteractionType,
} from "discord.js";
import { translate } from "bing-translate-api";
import { Memer } from "memer.ts";
import Database from "../database/client.js";
import fetch from "node-fetch";
import { Groq } from "groq-sdk";
import CONFIG from "../config/aiConfig.js";
import i18n from "../utils/newI18n.js";
import {
  state,
  isModelRateLimited,
  setModelRateLimit,
} from "../state/state.js";
import {
  fetchGroqModels,
  extractModelSize,
  getAvailableModels,
  getAvailableModel,
  updateModelCooldown,
  getModelCapabilities,
  getApiClientForModel,
} from "../services/groqModels.js";
import {
  generateToolsFromCommands,
  getParameterType,
} from "../services/tools.js";
import {
  splitMessage,
  buildInteractionComponents,
  sendResponse,
} from "../services/messages.js";
import processAiRequest from "../handlers/processAiRequest.js";
import {
  getUserPreferences,
  updateUserPreference,
  clearUserHistory,
  addConversationToHistory,
} from "../state/prefs.js";

// --- Start Localization Definitions ---
const localization_strings = {
  messages: {
    processing: {
      en: "Processing your request with `{model}`...",
      ru: "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å —Å `{model}`...",
      uk: "–û–±—Ä–æ–±–ª—è—é –≤–∞—à –∑–∞–ø–∏—Ç –∑ `{model}`...",
    },
    rateLimited: {
      en: "Model `{model}` is currently rate-limited. Please try again in about {minutes} minute(s) or select a different model.",
      ru: "–ú–æ–¥–µ–ª—å `{model}` –≤ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –æ–±–º–µ–∂–µ–Ω–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ {minutes} —Ö–≤–∏–ª–∏–Ω –∞–±–æ –≤–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –º–æ–¥–µ–ª—å.",
      uk: "–ú–æ–¥–µ–ª—å `{model}` –≤ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –æ–±–º–µ–∂–µ–Ω–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ {minutes} —Ö–≤–∏–ª–∏–Ω –∞–±–æ –≤–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –º–æ–¥–µ–ª—å.",
    },
    visionMismatch: {
      en: "Model `{model}` does not support image input. Please select a model with 'Vision' capability for this request.",
      ru: "–ú–æ–¥–µ–ª—å `{model}` –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å –∑ 'Vision' —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–ø–∏—Ç—É.",
      uk: "–ú–æ–¥–µ–ª—å `{model}` –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å –∑ 'Vision' —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–ø–∏—Ç—É.",
    },
    errorOccurred: {
      en: "üò• An error occurred: {error}",
      ru: "üò• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error}",
      uk: "üò• –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {error}",
    },
    modelDetailsError: {
      en: "üò• Error checking model details: {error}",
      ru: "üò• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–µ—Ç–∞–ª–µ–π –º–æ–¥–µ–ª–∏: {error}",
      uk: "üò• –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –¥–µ—Ç–∞–ª–µ–π –º–æ–¥–µ–ª—ñ: {error}",
    },
    noModelsFound: {
      en: "Sorry, I couldn't find any suitable AI models to use right now{vision, select, vision { for image analysis} other {}}.",
      ru: "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç{vision, select, vision { –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π} other {}}.",
      uk: "–í–∏–±–∞—á—Ç–µ, —è –Ω–µ –∑–º—ñ–≥ –∑–Ω–∞–π—Ç–∏ –ø—ñ–¥—Ö–æ–¥—è—â—ñ –º–æ–¥–µ–ª—ñ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç{vision, select, vision { –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –∑–æ–±—Ä–∞–∂–µ–Ω—å} other {}}.",
    },
    selectModelPrompt: {
      en: "Please select an AI model to use for this chat. You can also configure context memory and tool usage below.",
      ru: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –ø–∞–º—è—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–∏–∂–µ.",
      uk: "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —Ü—å–æ–º—É —á–∞—Ç—ñ. –í–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É –ø–∞–º—è—Ç—å —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ –Ω–∏–∂—á–µ.",
    },
    modelSelectedProcessing: {
      en: "Model selected: `{model}`. Processing your request...",
      ru: "–ú–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞: `{model}`. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...",
      uk: "–ú–æ–¥–µ–ª—å –≤–∏–±—Ä–∞–Ω–∞: `{model}`. –û–±—Ä–æ–±–ª—è—é –≤–∞—à –∑–∞–ø–∏—Ç...",
    },
    selectionTimeout: {
      en: "Model selection timed out.",
      ru: "–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω.",
      uk: "–í–∏–±—ñ—Ä –º–æ–¥–µ–ª—ñ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.",
    },
    selectionError: {
      en: "Sorry, I encountered an error while preparing model selection options.",
      ru: "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å –æ—à–∏–±–∫–æ–π –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏.",
      uk: "–í–∏–±–∞—á—Ç–µ, —è –∑—É—Å—Ç—Ä—ñ–≤ –ø–æ–º–∏–ª–∫—É –ø—Ä–∏ –ø—ñ–¥–≥–æ—Ç–æ–≤—Ü—ñ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –≤–∏–±–æ—Ä—É –º–æ–¥–µ–ª—ñ.",
    },
    toolComplete: {
      en: "Tool actions completed.",
      ru: "–î–µ–π—Å—Ç–≤–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.",
      uk: "–î—ñ—ó —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.",
    },
    noTextResponse: {
      en: "I didn't get a text response for that.",
      ru: "–Ø –Ω–µ –ø–æ–ª—É—á–∏–ª —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å.",
      uk: "–Ø –Ω–µ –æ—Ç—Ä–∏–º–∞–≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —Ü–µ–π –∑–∞–ø–∏—Ç.",
    },
    noTextResponseInternal: {
      en: "(No text response received)",
      ru: "(–ù–µ –ø–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç)",
      uk: "(–ù–µ –æ—Ç—Ä–∏–º–∞–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ)",
    },
    emptyResponseInternal: {
      en: "(Received an empty response from the AI)",
      ru: "(–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AI)",
      uk: "(–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ AI)",
    },
    toolsDisabledNote: {
      en: "*(AI tried to use tools, but they are currently disabled.)*",
      ru: "*(AI –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –Ω–æ –æ–Ω–∏ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã.)*",
      uk: "*(AI —Å–ø—Ä–æ–±—É–≤–∞–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏, –∞–ª–µ –≤–æ–Ω–∏ –≤ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –≤—ñ–¥–∫–ª—é—á–µ–Ω—ñ.)*",
    },
  },
  buttons: {
    systemPrompt: {
      on: {
        en: "System Prompt: ON",
        ru: "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç: –í–ö–õ",
        uk: "–°–∏—Å—Ç–µ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: –í–ö–õ",
      },
      off: {
        en: "System Prompt: OFF",
        ru: "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç: –í–´–ö–õ",
        uk: "–°–∏—Å—Ç–µ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: –í–ò–ö–õ",
      },
      tools: {
        on: {
          en: "Tools: ON",
          ru: "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: –í–ö–õ",
          uk: "–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏: –í–ö–õ",
        },
        off: {
          en: "Tools: OFF",
          ru: "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: –í–´–ö–õ",
          uk: "–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏: –í–ò–ú–ö",
        },
        offModel: {
          en: "Tools: OFF (Model)",
          ru: "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: –í–´–ö–õ (–ú–æ–¥–µ–ª—å)",
          uk: "–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏: –í–ò–ú–ö (–ú–æ–¥–µ–ª—å)",
        },
      },
      clearContext: {
        en: "Context ({current}/{max})",
        ru: "–ö–æ–Ω—Ç–µ–∫—Å—Ç ({current}/{max})",
        uk: "–ö–æ–Ω—Ç–µ–∫—Å—Ç ({current}/{max})",
      },
    },
    menus: {
      modelSelect: {
        placeholder: {
          en: "Select an AI model",
          ru: "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å AI",
          uk: "–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å AI",
        },
      },
    },
    toolResult: {
      successPrefix: {
        en: "üîß **Tool Result ({command}):**",
        ru: "üîß **–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ ({command}):**",
        uk: "üîß **–†–µ–∑—É–ª—å—Ç–∞—Ç —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É ({command}):**",
      },
      errorPrefix: {
        en: "‚ö†Ô∏è **Tool Error ({command}):**",
        ru: "‚ö†Ô∏è **–û—à–∏–±–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ ({command}):**",
        uk: "‚ö†Ô∏è **–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É ({command}):**",
      },
    },
    toolExec: {
      parseError: {
        en: "Error: Could not parse the arguments provided for the command {command}. Please ensure arguments are a valid JSON string. Received: {args}",
        ru: "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã {command}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —è–≤–ª—è—é—Ç—Å—è –¥–æ–ø—É—Å—Ç–∏–º–æ–π —Å—Ç—Ä–æ–∫–æ–π JSON. –ü–æ–ª—É—á–µ–Ω–æ: {args}",
        uk: "–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∏, –Ω–∞–¥–∞–Ω—ñ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ {command}. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ —î –¥–æ–ø—É—Å—Ç–∏–º–æ—é —Ä—è–¥–∫–æ–≤–æ—é —Å—Ç—Ä–æ–∫–æ—é JSON. –û—Ç—Ä–∏–º–∞–Ω–æ: {args}",
      },
      commandNotFound: {
        en: 'Command "{command}" not found.',
        ru: '–ö–æ–º–∞–Ω–¥–∞ "{command}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.',
        uk: '–ö–æ–º–∞–Ω–¥–∞ "{command}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.',
      },
      dmRestricted: {
        en: "Error: This command can only be used in servers, not in DMs.",
        ru: "–û—à–∏–±–∫–∞: –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–µ—Ä–≤–µ—Ä–∞—Ö, –∞ –Ω–µ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.",
        uk: "–ü–æ–º–∏–ª–∫–∞: –¶—è –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ –±—É—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∞ —Ç—ñ–ª—å–∫–∏ –≤ —Å–µ—Ä–≤–µ—Ä–∞—Ö, –∞ –Ω–µ –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö.",
      },
      economyDepositError: {
        en: "The 'deposit' command is for your own bank. Use 'transfer' to send money to someone else.",
        ru: "–ö–æ–º–∞–Ω–¥–∞ 'deposit' –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –≤–∞—à–µ–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±–∞–Ω–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'transfer', —á—Ç–æ–±—ã –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ –∫–æ–º—É-–ª–∏–±–æ –¥—Ä—É–≥–æ–º—É.",
        uk: "–ö–æ–º–∞–Ω–¥–∞ 'deposit' –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –≤–∞—à–æ–≥–æ –≤–ª–∞—Å–Ω–æ–≥–æ –±–∞–Ω–∫—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ 'transfer', —â–æ–± –ø–µ—Ä–µ–¥–∞—Ç–∏ –≥—Ä–æ—à—ñ —ñ–Ω—à–æ–º—É.",
      },
      economyTransferError: {
        en: "To put money in your bank, use the 'deposit' command.",
        ru: "–ß—Ç–æ–±—ã –ø–æ–ª–æ–∂–∏—Ç—å –¥–µ–Ω—å–≥–∏ –≤ –≤–∞—à –±–∞–Ω–∫, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É 'deposit'.",
        uk: "–©–æ–± –ø–æ–∫–ª–∞—Å—Ç–∏ –≥—Ä–æ—à—ñ –≤ –≤–∞—à –±–∞–Ω–∫, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É 'deposit'.",
      },
      economyWithdrawError: {
        en: "The 'withdraw' command is only for your own bank.",
        ru: "–ö–æ–º–∞–Ω–¥–∞ 'withdraw' –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—à–µ–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±–∞–Ω–∫–∞.",
        uk: "–ö–æ–º–∞–Ω–¥–∞ 'withdraw' –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –≤–∞—à–æ–≥–æ –≤–ª–∞—Å–Ω–æ–≥–æ –±–∞–Ω–∫—É.",
      },
      missingParams: {
        en: "Error: Missing required parameters for command '{command}': {missing}. Required: {required}. Please provide values for these.",
        ru: "–û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã '{command}': {missing}. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ: {required}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —ç—Ç–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.",
        uk: "–ü–æ–º–∏–ª–∫–∞: –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ '{command}': {missing}. –û–±–æ–≤'—è–∑–∫–æ–≤–æ: {required}. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è —Ü–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤.",
      },
      userNotFound: {
        en: "Error: Could not find the user specified: {user}. Please provide a valid user mention, ID, or username.",
        ru: "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–π —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, ID –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
        uk: "–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∫–∞–∑–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user}. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ –¥–æ–ø—É—Å—Ç–∏–º–∏–π —É–ø–æ–º–∏–Ω–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, ID –∞–±–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.",
      },
      missingPermissions: {
        en: "I seem to be missing the required permissions to do that.",
        ru: "–Ø –∫–∞–∂—É—Å—å, —á—Ç–æ —É –º–µ–Ω—è –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ.",
        uk: "–Ø –∑–¥–∞—é—Å—å, —â–æ —É –º–µ–Ω–µ –Ω–µ–º–∞—î –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –¥–æ–∑–≤–æ–ª—ñ–≤ –¥–ª—è —Ü—å–æ–≥–æ.",
      },
      errorGeneric: {
        en: "An error occurred while running the command: {error}",
        ru: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {error}",
        uk: "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏: {error}",
      },
      successGeneric: {
        en: "Command executed successfully.",
        ru: "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.",
        uk: "–ö–æ–º–∞–Ω–¥–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ.",
      },
    },
    collector: {
      contextClear: {
        success: {
          en: "Conversation context cleared!",
          ru: "–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω!",
          uk: "–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥—ñ–∞–ª–æ–≥—É –æ—á–∏—â–µ–Ω–∏–π!",
        },
      },
      modelChange: {
        success: {
          en: "Model changed to `{model}`. This will be used for your next request.",
          ru: "–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ `{model}`. –≠—Ç–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤–∞—à–µ–≥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.",
          uk: "–ú–æ–¥–µ–ª—å –∑–º—ñ–Ω–µ–Ω–∞ –Ω–∞ `{model}`. –¶–µ –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—è –¥–ª—è –≤–∞—à–æ–≥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É.",
        },
      },
    },
    sanitization: {
      // Optional: Keep these internal?
      mention: { en: "(mention)", ru: "(—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ)", uk: "(—É–ø–æ–º–∏–Ω–∞–Ω–Ω—è)" },
      everyone: { en: "@ everyone", ru: "@ –≤—Å–µ—Ö", uk: "@ –≤—Å—ñ—Ö" },
      here: { en: "@ here", ru: "@ –∑–¥–µ—Å—å", uk: "@ —Ç—É—Ç" },
    },
  },
};
// --- End Localization Definitions ---

function validateEnvironment() {
  let isValid = true;
  const missingVars = [];

  if (!process.env.GROQ_API) {
    console.error("‚ö†Ô∏è Missing GROQ_API environment variable");
    missingVars.push("GROQ_API");
    isValid = false;
  }

  if (!isValid) {
    console.error(
      `‚ùå AI module cannot function without: ${missingVars.join(", ")}`
    );
  } else {
    console.log("‚úÖ AI module environment variables validated");
  }

  return isValid;
}

validateEnvironment();

async function checkAndInitGroqClient(client) {
  const clientPath = CONFIG.groq.clientPath;

  if (!client[clientPath]) {
    console.warn(`‚ö†Ô∏è Groq client not found at client.${clientPath}`);
    console.log("Attempting to initialize Groq client");

    try {
      if (CONFIG.groq.apiKey) {
        client[clientPath] = new Groq({
          apiKey: CONFIG.groq.apiKey,
        });
        console.log("‚úÖ Successfully initialized Groq client");
      } else {
        console.error("‚ùå Cannot initialize Groq client: missing API key");
      }
    } catch (error) {
      console.error("‚ùå Failed to initialize Groq client:", error.message);
      console.error("Make sure you have the 'groq-sdk' package installed");
    }
  } else {
    console.log(`‚úÖ Groq client already exists at client.${clientPath}`);
  }

  return !!client[clientPath];
}

// Groq model utilities are now imported from ../services/groqModels.js

// --- Start MessageCreate Handler Localization ---
export default {
  name: Events.MessageCreate,
  localization_strings: localization_strings, // Add the strings object to the export
  async execute(message) {
    if (!message.client._groqChecked) {
      message.client._groqChecked = true;
      await checkAndInitGroqClient(message.client);
    }

    if (message.author.bot) return;

    const userId = message.author.id;

    console.log(
      `Message received from ${
        message.author.tag
      }: "${message.content.substring(0, 50)}${
        message.content.length > 50 ? "..." : ""
      }"`
    );

    if (!message.mentions.users.has(message.client.user.id)) {
      console.log("Message doesn't mention bot, ignoring");
      return;
    }

    const messageContent = message.content
      .replace(new RegExp(`<@!?${message.client.user.id}>`, "g"), "")
      .trim();

    if (!messageContent && message.attachments.size === 0) {
      console.log("Message only contains ping, no content or attachments");
      return;
    }

    const prefs = getUserPreferences(userId);
    console.log(`User preferences for ${userId}:`, {
      selectedModel: prefs.selectedModel,
      systemPromptEnabled: prefs.systemPromptEnabled,
      toolsEnabled: prefs.toolsEnabled,
    });

    // Determine locale early for potential messages
    let effectiveLocale = "en";
    try {
      const userDbLocale = await Database.getUserLocale(
        message.guild?.id,
        userId
      );
      if (userDbLocale && ["en", "ru", "uk"].includes(userDbLocale)) {
        effectiveLocale = userDbLocale;
      } else if (message.guild?.preferredLocale) {
        const normalizedGuildLocale = message.guild.preferredLocale
          .split("-")[0]
          .toLowerCase();
        if (["en", "ru", "uk"].includes(normalizedGuildLocale)) {
          effectiveLocale = normalizedGuildLocale;
        }
      }
    } catch (dbError) {
      console.error(
        `Error fetching user locale for ${userId}, defaulting to 'en':`,
        dbError
      );
    }
    // Set locale for subsequent i18n calls within this scope if needed
    i18n.setLocale(effectiveLocale);

    const isVisionRequest =
      message.attachments.size > 0 &&
      message.attachments.first().contentType?.startsWith("image/");

    if (isVisionRequest) {
      console.log(
        `Vision request detected with attachment: ${
          message.attachments.first().name
        }`
      );
    }

    if (!prefs.selectedModel) {
      console.log(
        `User ${userId} has no model selected. Prompting for selection.`
      );
      message.channel.sendTyping();

      try {
        const availableModels = await getAvailableModels(isVisionRequest);
        console.log(`Found ${availableModels.length} available models`);

        if (availableModels.length === 0) {
          // Use determined locale for the reply
          await message.reply(
            i18n.__(
              "events.ai.messages.noModelsFound",
              { vision: isVisionRequest ? "vision" : "text" },
              effectiveLocale
            )
          );
          return;
        }

        // Pass locale to build components
        const components = await buildInteractionComponents(
          userId,
          availableModels,
          isVisionRequest,
          true,
          effectiveLocale
        );

        console.log("Sending model selection prompt");
        // Use locale for the prompt message
        let promptMsg = await message.reply({
          content: i18n.__(
            "events.ai.messages.selectModelPrompt",
            effectiveLocale
          ),
          components: components,
        });

        state.pendingInteractions[userId] = message;
        console.log(`Stored pending interaction for user ${userId}`);

        const collector = promptMsg.createMessageComponentCollector({
          filter: (i) => i.user.id === userId,
          time: 5 * 60 * 1000,
        });

        console.log(`Created message component collector for user ${userId}`);

        collector.on("collect", async (interaction) => {
          console.log(
            `Initial Collector: Received interaction - Type: ${interaction.componentType}, Custom ID: ${interaction.customId}, User: ${interaction.user.id}`
          );

          const customId = interaction.customId;

          if (
            interaction.isStringSelectMenu() &&
            customId.startsWith("ai_select_model_")
          ) {
            console.log(
              "Initial Collector: Handling StringSelectMenu interaction."
            );
            const selectedModelId = interaction.values[0];
            console.log(
              `Initial Collector: Raw selected value: ${selectedModelId}`
            );

            updateUserPreference(userId, "selectedModel", selectedModelId);
            console.log(
              `Initial Collector: User ${userId} preference updated to model: ${selectedModelId}`
            );

            const originalMessage = state.pendingInteractions[userId];
            if (originalMessage) {
              console.log(
                `Initial Collector: Found pending message ${originalMessage.id}.`
              );
              delete state.pendingInteractions[userId];
              collector.stop("model_selected");
              console.log("Initial Collector: Stopped collector.");

              try {
                await interaction.deferUpdate();
                console.log("Initial Collector: Interaction deferred.");

                // Use locale for the edit message
                await promptMsg.edit({
                  content: i18n.__(
                    "events.ai.messages.modelSelectedProcessing",
                    { model: selectedModelId },
                    effectiveLocale
                  ),
                  components: [],
                });
                console.log(
                  `Initial Collector: Edited prompt message ${promptMsg.id}.`
                );
              } catch (updateError) {
                console.error(
                  "Initial Collector: Error deferring/editing interaction/prompt message: ",
                  updateError
                );
                // Use locale for the fallback message
                await message.channel
                  .send(
                    i18n.__(
                      "events.ai.messages.modelSelectedProcessing",
                      { model: selectedModelId },
                      effectiveLocale
                    )
                  )
                  .catch((e) =>
                    console.error("Failed to send fallback message:", e)
                  );
                promptMsg = null;
              }

              const messageContent = originalMessage.content
                .replace(
                  new RegExp(`<@!?${originalMessage.client.user.id}>`, "g"),
                  ""
                )
                .trim();
              const isVisionRequest =
                originalMessage.attachments.size > 0 &&
                originalMessage.attachments
                  .first()
                  .contentType?.startsWith("image/");

              console.log("Initial Collector: Calling processAiRequest...");
              await processAiRequest(
                originalMessage,
                userId,
                messageContent,
                isVisionRequest,
                promptMsg,
                effectiveLocale // Pass locale here
              );
              console.log("Initial Collector: processAiRequest call finished.");
            } else {
              console.warn(
                `Initial Collector: No pending message found for user ${userId} after model selection.`
              );
              try {
                await interaction.update({
                  content: i18n.__("events.ai.messages.modelSelected", {
                    model: selectedModelId,
                  }),
                  components: [],
                });
              } catch (e) {
                console.error(
                  "Couldn't update interaction after model selection (no pending message)",
                  e
                );
              }
            }
          } else {
            console.log(
              `Initial Collector: Interaction ${customId} is not the model select menu. Ignoring in this collector.`
            );
          }

          // NOTE: Removed toggle and retry button logic from this initial collector.
          // They are now handled by the collector attached in sendResponse.
        });

        collector.on("end", (collected, reason) => {
          console.log(
            `Collector for ${userId} ended with reason: ${reason}, collected ${collected.size} interactions`
          );

          if (
            reason === "time" &&
            state.pendingInteractions[userId] === message
          ) {
            delete state.pendingInteractions[userId];
            if (collected.size === 0) {
              // Use locale for the timeout message
              promptMsg
                .edit({
                  content: i18n.__(
                    "events.ai.messages.selectionTimeout",
                    effectiveLocale
                  ),
                  components: [],
                })
                .catch((e) =>
                  console.error("Failed to edit timeout message:", e)
                );
              console.log(`Pending interaction timed out for user ${userId}`);
            }
          }
        });
      } catch (error) {
        console.error("Error during model selection process:", error);
        // Use locale for the error message
        await message
          .reply(i18n.__("events.ai.messages.selectionError", effectiveLocale))
          .catch((e) => {});
      }

      return; // Stop processing, wait for interaction
    }

    console.log(
      `Processing message from ${message.author.tag} with model ${prefs.selectedModel}`
    );
    // Pass effectiveLocale to processAiRequest
    await processAiRequest(
      message,
      userId,
      messageContent,
      isVisionRequest,
      null,
      effectiveLocale
    );
  },
};
// --- End MessageCreate Handler Localization ---

// User preferences now managed in src/state/prefs.js
// Model capabilities and API client are imported from services/groqModels.js
