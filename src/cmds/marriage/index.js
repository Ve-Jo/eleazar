import {
  SlashCommandBuilder,
  EmbedBuilder,
  PermissionsBitField,
} from "discord.js";
import Database from "../../database/client.js";

export default {
  data: () => {
    const builder = new SlashCommandBuilder()
      .setName("marriage")
      .setDescription("Manage your marriage status")
      .addSubcommand((subcommand) =>
        subcommand
          .setName("propose")
          .setDescription("Propose marriage to another user")
          .addUserOption((option) =>
            option
              .setName("user")
              .setDescription("The user to propose to")
              .setRequired(true)
          )
      )
      .addSubcommand((subcommand) =>
        subcommand
          .setName("accept")
          .setDescription("Accept a marriage proposal")
          .addUserOption((option) =>
            option
              .setName("user")
              .setDescription("The user whose proposal you want to accept")
              .setRequired(true)
          )
      )
      .addSubcommand((subcommand) =>
        subcommand
          .setName("reject")
          .setDescription("Reject a marriage proposal")
          .addUserOption((option) =>
            option
              .setName("user")
              .setDescription("The user whose proposal you want to reject")
              .setRequired(true)
          )
      )
      .addSubcommand((subcommand) =>
        subcommand
          .setName("divorce")
          .setDescription("End your current marriage")
      );
    return builder;
  },
  localization_strings: {
    command: {
      name: {
        ru: "–±—Ä–∞–∫",
        uk: "—à–ª—é–±",
      },
      description: {
        ru: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º —Å–µ–º–µ–π–Ω—ã–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ–º",
        uk: "–ö–µ—Ä—É–≤–∞–Ω–Ω—è –≤–∞—à–∏–º —Å—ñ–º–µ–π–Ω–∏–º —Å—Ç–∞–Ω–æ–º",
      },
    },
    subcommands: {
      propose: {
        name: {
          ru: "–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å",
          uk: "–∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏",
        },
        description: {
          ru: "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –±—Ä–∞–∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
          uk: "–ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ —à–ª—é–± —ñ–Ω—à–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ",
        },
        options: {
          user: {
            description: {
              ru: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –±—Ä–∞–∫",
              uk: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á, —è–∫–æ–º—É –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ —à–ª—é–±",
            },
          },
        },
      },
      accept: {
        name: {
          ru: "–ø—Ä–∏–Ω—è—Ç—å",
          uk: "–ø—Ä–∏–π–Ω—è—Ç–∏",
        },
        description: {
          ru: "–ü—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –±—Ä–∞–∫–µ",
          uk: "–ü—Ä–∏–π–Ω—è—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –ø—Ä–æ —à–ª—é–±",
        },
        options: {
          user: {
            description: {
              ru: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —á—å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–Ω—è—Ç—å",
              uk: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á, —á–∏—é –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –≤–∏ —Ö–æ—á–µ—Ç–µ –ø—Ä–∏–π–Ω—è—Ç–∏",
            },
          },
        },
      },
      reject: {
        name: {
          ru: "–æ—Ç–∫–ª–æ–Ω–∏—Ç—å",
          uk: "–≤—ñ–¥—Ö–∏–ª–∏—Ç–∏",
        },
        description: {
          ru: "–û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –±—Ä–∞–∫–µ",
          uk: "–í—ñ–¥—Ö–∏–ª–∏—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –ø—Ä–æ —à–ª—é–±",
        },
        options: {
          user: {
            description: {
              ru: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —á—å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å",
              uk: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á, —á–∏—é –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –≤–∏ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥—Ö–∏–ª–∏—Ç–∏",
            },
          },
        },
      },
      divorce: {
        name: {
          ru: "—Ä–∞–∑–≤–æ–¥",
          uk: "—Ä–æ–∑–ª—É—á–µ–Ω–Ω—è",
        },
        description: {
          ru: "–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–∞—à —Ç–µ–∫—É—â–∏–π –±—Ä–∞–∫",
          uk: "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∞—à –ø–æ—Ç–æ—á–Ω–∏–π —à–ª—é–±",
        },
      },
    },
    // --- Propose --- //
    proposeSuccess: {
      en: "üíç You have proposed marriage to {{user}}! He/She needs to use /marriage accept to accept.",
      ru: "üíç –í—ã –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ –±—Ä–∞–∫ {{user}}! –ï–π/–µ–º—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /marriage accept, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å.",
      uk: "üíç –í–∏ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞–ª–∏ —à–ª—é–± {{user}}! –á–π/–π–æ–º—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ /marriage accept, —â–æ–± –ø—Ä–∏–π–Ω—è—Ç–∏.",
    },
    cannotMarrySelf: {
      en: "You cannot marry yourself.",
      ru: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∂–µ–Ω–∏—Ç—å—Å—è –Ω–∞ —Å–µ–±–µ.",
      uk: "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ–¥—Ä—É–∂–∏—Ç–∏—Å—è —Å–∞–º—ñ –∑ —Å–æ–±–æ—é.",
    },
    cannotMarryBot: {
      en: "You cannot marry a bot.",
      ru: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∂–µ–Ω–∏—Ç—å—Å—è –Ω–∞ –±–æ—Ç–µ.",
      uk: "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ–¥—Ä—É–∂–∏—Ç–∏—Å—è –∑ –±–æ—Ç–æ–º.",
    },
    alreadyMarried: {
      en: "You are already married or have a pending proposal.",
      ru: "–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ –∏–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –æ–∂–∏–¥–∞—é—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.",
      uk: "–í–∏ –≤–∂–µ –æ–¥—Ä—É–∂–µ–Ω—ñ –∞–±–æ –º–∞—î—Ç–µ –æ—á—ñ–∫—É–≤–∞–Ω—É –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é.",
    },
    targetAlreadyMarried: {
      en: "{{user}} is already married or has a pending proposal.",
      ru: "{{user}} —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –±—Ä–∞–∫–µ –∏–ª–∏ —É –Ω–∏—Ö –µ—Å—Ç—å –æ–∂–∏–¥–∞—é—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.",
      uk: "{{user}} –≤–∂–µ –æ–¥—Ä—É–∂–µ–Ω—ñ –∞–±–æ –º–∞—é—Ç—å –æ—á—ñ–∫—É–≤–∞–Ω—É –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é.",
    },
    proposalError: {
      en: "An error occurred while proposing marriage.",
      ru: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –±—Ä–∞–∫–∞.",
      uk: "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —à–ª—é–±—É.",
    },
    // --- Proposal DM --- //
    proposalDM: {
      en: "üíç You have received a marriage proposal from {{user}} in {{guild}}! Use /marriage accept or /marriage reject in that server.",
      ru: "üíç –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –±—Ä–∞–∫–µ –æ—Ç {{user}} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {{guild}}! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /marriage accept –∏–ª–∏ /marriage reject –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ.",
      uk: "üíç –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –ø—Ä–æ —à–ª—é–± –≤—ñ–¥ {{user}} –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ {{guild}}! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /marriage accept –∞–±–æ /marriage reject –Ω–∞ —Ü—å–æ–º—É —Å–µ—Ä–≤–µ—Ä—ñ.",
    },
    cannotSendDM: {
      en: "(Could not send a DM to the user.)",
      ru: "(–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.)",
      uk: "(–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –û–ü –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ.)",
    },
    // --- Accept --- //
    acceptSuccess: {
      en: "üíñ Congratulations! You are now married to {{user}}!",
      ru: "üíñ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–ø–µ—Ä—å –≤—ã —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ —Å {{user}}!",
      uk: "üíñ –í—ñ—Ç–∞—î–º–æ! –¢–µ–ø–µ—Ä –≤–∏ –æ–¥—Ä—É–∂–µ–Ω—ñ –∑ {{user}}!",
    },
    noProposalToAccept: {
      en: "You do not have a pending marriage proposal from {{user}}.",
      ru: "–£ –≤–∞—Å –Ω–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –±—Ä–∞–∫–µ –æ—Ç {{user}}.",
      uk: "–£ –≤–∞—Å –Ω–µ–º–∞—î –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –ø—Ä–æ —à–ª—é–± –≤—ñ–¥ {{user}}.",
    },
    acceptError: {
      en: "An error occurred while accepting the marriage proposal.",
      ru: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –±—Ä–∞–∫–µ.",
      uk: "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø—Ä–∏–π–Ω—è—Ç—Ç—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –ø—Ä–æ —à–ª—é–±.",
    },
    // --- Reject --- //
    rejectSuccess: {
      en: "üíî You have rejected the marriage proposal from {{user}}.",
      ru: "üíî –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –±—Ä–∞–∫–µ –æ—Ç {{user}}.",
      uk: "üíî –í–∏ –≤—ñ–¥—Ö–∏–ª–∏–ª–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –ø—Ä–æ —à–ª—é–± –≤—ñ–¥ {{user}}.",
    },
    noProposalToReject: {
      en: "You do not have a pending marriage proposal from {{user}}.",
      ru: "–£ –≤–∞—Å –Ω–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –±—Ä–∞–∫–µ –æ—Ç {{user}}.",
      uk: "–£ –≤–∞—Å –Ω–µ–º–∞—î –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –ø—Ä–æ —à–ª—é–± –≤—ñ–¥ {{user}}.",
    },
    rejectError: {
      en: "An error occurred while rejecting the marriage proposal.",
      ru: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –±—Ä–∞–∫–µ.",
      uk: "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –ø—Ä–æ —à–ª—é–±.",
    },
    // --- Divorce --- //
    divorceSuccess: {
      en: "üíî You have successfully divorced {{user}}.",
      ru: "üíî –í—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ–ª–∏—Å—å —Å {{user}}.",
      uk: "üíî –í–∏ —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–ª—É—á–∏–ª–∏—Å—è –∑ {{user}}.",
    },
    notMarried: {
      en: "You are not currently married.",
      ru: "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –≤—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ.",
      uk: "–ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –≤–∏ –Ω–µ –æ–¥—Ä—É–∂–µ–Ω—ñ.",
    },
    divorceError: {
      en: "An error occurred while processing the divorce.",
      ru: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞–∑–≤–æ–¥–∞.",
      uk: "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ —Ä–æ–∑–ª—É—á–µ–Ω–Ω—è.",
    },
    // --- Divorce DM --- //
    divorceDM: {
      en: "üíî You have been divorced from {{user}} in {{guild}}.",
      ru: "üíî –í—ã —Ä–∞–∑–≤–µ–ª–∏—Å—å —Å {{user}} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {{guild}}.",
      uk: "üíî –í–∏ —Ä–æ–∑–ª—É—á–∏–ª–∏—Å—è –∑ {{user}} –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ {{guild}}.",
    },
  },

  async execute(interaction, i18n) {
    const subcommand = interaction.options.getSubcommand();
    const guildId = interaction.guild.id;
    const userId = interaction.user.id;

    await interaction.deferReply();

    try {
      switch (subcommand) {
        case "propose": {
          const targetUser = interaction.options.getUser("user");
          const targetUserId = targetUser.id;

          if (userId === targetUserId) {
            return interaction.editReply(
              i18n.__("commands.marriage.cannotMarrySelf")
            );
          }
          if (targetUser.bot) {
            return interaction.editReply(
              i18n.__("commands.marriage.cannotMarryBot")
            );
          }

          try {
            await Database.proposeMarriage(guildId, userId, targetUserId);

            // --- Send DM to target user ---
            let dmSent = false;
            try {
              await targetUser.send(
                i18n.__("commands.marriage.proposalDM", {
                  user: interaction.user.tag,
                  guild: interaction.guild.name,
                })
              );
              dmSent = true;
            } catch (dmError) {
              console.warn(
                `Failed to send proposal DM to ${targetUser.id}:`,
                dmError
              );
            }
            // --- End Send DM ---

            return interaction.editReply(
              i18n.__("commands.marriage.proposeSuccess", {
                user: targetUser.toString(),
                proposer: interaction.user.toString(),
              }) +
                (dmSent ? "" : ` ${i18n.__("commands.marriage.cannotSendDM")}`)
            );
          } catch (error) {
            // Handle specific errors from proposeMarriage
            if (error.message.includes("User 1 is already married")) {
              return interaction.editReply(
                i18n.__("commands.marriage.alreadyMarried")
              );
            }
            if (error.message.includes("User 2 is already married")) {
              return interaction.editReply(
                i18n.__("commands.marriage.targetAlreadyMarried", {
                  user: targetUser.toString(),
                })
              );
            }
            console.error("Propose marriage error:", error);
            return interaction.editReply(
              i18n.__("commands.marriage.proposalError")
            );
          }
        }
        case "accept": {
          const proposingUser = interaction.options.getUser("user");
          const proposingUserId = proposingUser.id;

          try {
            await Database.acceptMarriage(guildId, proposingUserId, userId);
            return interaction.editReply(
              i18n.__("commands.marriage.acceptSuccess", {
                user: proposingUser.toString(),
              })
            );
          } catch (error) {
            if (error.message.includes("No pending marriage proposal")) {
              return interaction.editReply(
                i18n.__("commands.marriage.noProposalToAccept", {
                  user: proposingUser.toString(),
                })
              );
            }
            console.error("Accept marriage error:", error);
            return interaction.editReply(
              i18n.__("commands.marriage.acceptError")
            );
          }
        }
        case "reject": {
          const proposingUser = interaction.options.getUser("user");
          const proposingUserId = proposingUser.id;

          try {
            // Reject checks both directions (userId1, userId2) and (userId2, userId1)
            await Database.rejectMarriage(guildId, proposingUserId, userId);
            return interaction.editReply(
              i18n.__("commands.marriage.rejectSuccess", {
                user: proposingUser.toString(),
              })
            );
          } catch (error) {
            if (error.message.includes("No pending marriage proposal")) {
              // Check if the proposal was sent *by* the current user to the target
              const status = await Database.getMarriageStatus(guildId, userId);
              if (
                status?.partnerId === proposingUserId &&
                status?.status === "PENDING"
              ) {
                await Database.rejectMarriage(guildId, userId, proposingUserId); // Reject own proposal
                return interaction.editReply(
                  i18n.__("commands.marriage.rejectSuccess", {
                    user: proposingUser.toString(),
                  })
                );
              }
              // Otherwise, no proposal exists from the target user
              return interaction.editReply(
                i18n.__("commands.marriage.noProposalToReject", {
                  user: proposingUser.toString(),
                })
              );
            }
            console.error("Reject marriage error:", error);
            return interaction.editReply(
              i18n.__("commands.marriage.rejectError")
            );
          }
        }
        case "divorce": {
          try {
            const status = await Database.getMarriageStatus(guildId, userId);
            if (!status || status.status !== "MARRIED") {
              return interaction.editReply(
                i18n.__("commands.marriage.notMarried")
              );
            }

            const partner = await interaction.client.users.fetch(
              status.partnerId
            );
            const partnerTag = partner
              ? partner.toString()
              : `User (${status.partnerId})`;

            await Database.dissolveMarriage(guildId, userId, status.partnerId);

            // --- Send DMs to both users ---
            let selfDmSent = false;
            let partnerDmSent = false;
            const divorceMessage = i18n.__("commands.marriage.divorceDM", {
              user: partner.tag,
              guild: interaction.guild.name,
            });
            const selfDivorceMessage = i18n.__("commands.marriage.divorceDM", {
              user: interaction.user.tag,
              guild: interaction.guild.name,
            });

            try {
              await interaction.user.send(divorceMessage);
              selfDmSent = true;
            } catch (e) {
              console.warn(`Failed to send divorce DM to ${userId}`);
            }

            if (partner) {
              try {
                await partner.send(selfDivorceMessage);
                partnerDmSent = true;
              } catch (e) {
                console.warn(
                  `Failed to send divorce DM to partner ${partner.id}`
                );
              }
            }
            // --- End Send DMs ---

            let replyMessage = i18n.__("commands.marriage.divorceSuccess", {
              user: partnerTag,
            });
            if (!selfDmSent)
              replyMessage += ` ${i18n
                .__("commands.marriage.cannotSendDM")
                .replace("user", "yourself")}`;
            if (!partnerDmSent)
              replyMessage += ` ${i18n
                .__("commands.marriage.cannotSendDM")
                .replace("the user", "your partner")}`;

            return interaction.editReply(replyMessage);
          } catch (error) {
            if (error.message.includes("No active marriage found")) {
              return interaction.editReply(
                i18n.__("commands.marriage.notMarried")
              );
            }
            console.error("Divorce error:", error);
            return interaction.editReply(
              i18n.__("commands.marriage.divorceError")
            );
          }
        }
        default: {
          return interaction.editReply("Unknown subcommand.");
        }
      }
    } catch (error) {
      console.error(`Error executing marriage command (${subcommand}):`, error);
      interaction.editReply(
        "An unexpected error occurred. Please try again later."
      );
    }
  },
};
