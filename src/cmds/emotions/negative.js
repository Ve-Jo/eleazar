import {
  SlashCommandSubcommand,
  SlashCommandOption,
  OptionType,
  I18nCommandBuilder,
} from "../../utils/builders/index.js";
import {
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  ComponentType,
} from "discord.js";
import HMFull from "hmfull";
import i18n from "../../utils/i18n.js";

export default {
  data: () => {
    const i18nBuilder = new I18nCommandBuilder("emotions", "negative");

    const subcommand = new SlashCommandSubcommand({
      name: i18nBuilder.getSimpleName(i18nBuilder.translate("name")),
      description: i18nBuilder.translate("description"),
      name_localizations: i18nBuilder.getLocalizations("name"),
      description_localizations: i18nBuilder.getLocalizations("description"),
    });

    // Add emotion option
    const emotionOption = new SlashCommandOption({
      type: OptionType.STRING,
      name: "emotion",
      description: i18nBuilder.translateOption("emotion", "description"),
      required: true,
      name_localizations: i18nBuilder.getOptionLocalizations("emotion", "name"),
      description_localizations: i18nBuilder.getOptionLocalizations(
        "emotion",
        "description"
      ),
      choices: [
        { name: "bonk", value: "bonk" },
        { name: "punch", value: "punch" },
        { name: "poke", value: "poke" },
        { name: "bully", value: "bully" },
        { name: "kick", value: "kick" },
        { name: "slap", value: "slap" },
        { name: "throw", value: "throw" },
        { name: "bite", value: "bite" },
        { name: "kill", value: "kill" },
        { name: "threaten", value: "threaten" },
        { name: "tickle", value: "tickle" },
      ],
    });

    // Add user option
    const userOption = new SlashCommandOption({
      type: OptionType.USER,
      name: "user",
      description: i18nBuilder.translateOption("user", "description"),
      required: true,
      name_localizations: i18nBuilder.getOptionLocalizations("user", "name"),
      description_localizations: i18nBuilder.getOptionLocalizations(
        "user",
        "description"
      ),
    });

    subcommand.addOption(emotionOption);
    subcommand.addOption(userOption);

    return subcommand;
  },
  async execute(interaction) {
    const emotion = interaction.options.getString("emotion");
    const targetUser = interaction.options.getUser("user");

    if (targetUser.id === interaction.user.id) {
      return interaction.reply({
        content: i18n.__("emotions.negative.cannotSelectSelf"),
        ephemeral: true,
      });
    }

    if (targetUser.bot) {
      return interaction.reply({
        content: i18n.__("emotions.negative.cannotSelectBot"),
        ephemeral: true,
      });
    }

    async function getValidImageUrl() {
      const sources = [
        HMFull.HMtai.sfw,
        HMFull.Nekos.sfw,
        HMFull.NekoBot.sfw,
        HMFull.NekoLove.sfw,
      ];

      for (let attempts = 0; attempts < 3; attempts++) {
        for (const source of sources) {
          if (Object.keys(source).includes(emotion)) {
            let imageUrl = await source[emotion]();
            if (typeof imageUrl === "object" && imageUrl.url) {
              imageUrl = imageUrl.url;
            }
            if (
              imageUrl &&
              typeof imageUrl === "string" &&
              imageUrl.startsWith("http")
            ) {
              return imageUrl;
            }
          }
        }
      }
      return null;
    }

    async function createEmbed() {
      const imageUrl = await getValidImageUrl();

      if (!imageUrl) {
        return null;
      }

      return new EmbedBuilder()
        .setColor(process.env.EMBED_COLOR)
        .setTitle(i18n.__(`emotions.negative.${emotion}.title`))
        .setDescription(
          i18n.__(`emotions.negative.${emotion}.description`, {
            user: interaction.user.id,
            targetUser: targetUser.id,
          })
        )
        .setImage(imageUrl)
        .setFooter({
          text: interaction.user.displayName,
          iconURL: interaction.user.displayAvatarURL(),
        });
    }

    const initialEmbed = await createEmbed();

    if (!initialEmbed) {
      return interaction.reply({
        content: i18n.__("imageNotFound"),
        ephemeral: true,
      });
    }

    const row = new ActionRowBuilder().addComponents(
      new ButtonBuilder()
        .setCustomId("retry")
        .setEmoji("üîÑ")
        .setStyle(ButtonStyle.Primary)
    );

    const response = await interaction.reply({
      embeds: [initialEmbed],
      components: [row],
    });

    const collector = response.createMessageComponentCollector({
      filter: (i) => i.user.id === interaction.user.id,
      componentType: ComponentType.Button,
      idle: 60000,
    });

    collector.on("collect", async (i) => {
      if (i.customId === "retry") {
        const newEmbed = await createEmbed();
        if (newEmbed) {
          await i.update({ embeds: [newEmbed], components: [row] });
        } else {
          await i.reply({
            content: i18n.__("emotions.negative.imageNotFound"),
            ephemeral: true,
          });
        }
      }
    });

    collector.on("end", () => {
      row.components[0].setDisabled(true);
      interaction.editReply({ components: [row] }).catch(console.error);
    });
  },
  localization_strings: {
    name: {
      en: "negative",
      ru: "–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ",
      uk: "–Ω–µ–≥–∞—Ç–∏–≤–Ω—ñ",
    },
    description: {
      en: "Choose a negative emotion with a user",
      ru: "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—É—é —ç–º–æ—Ü–∏—é —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
      uk: "–í–∏–±–µ—Ä—ñ—Ç—å –Ω–µ–≥–∞—Ç–∏–≤–Ω—É –µ–º–æ—Ü—ñ—é –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º",
    },
    options: {
      emotion: {
        name: {
          en: "emotion",
          ru: "—ç–º–æ—Ü–∏—è",
          uk: "–µ–º–æ—Ü—ñ—è",
        },
        description: {
          en: "Choose an emotion",
          ru: "–í—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ—Ü–∏—é",
          uk: "–í–∏–±–µ—Ä—ñ—Ç—å –µ–º–æ—Ü—ñ—é",
        },
      },
      user: {
        name: {
          en: "user",
          ru: "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
          uk: "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á",
        },
        description: {
          en: "Choose a user",
          ru: "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
          uk: "–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
        },
      },
    },
    bonk: {
      title: {
        en: "Bonk",
        ru: "–°—Ç—É–∫",
        uk: "–°—Ç—É–∫",
      },
      description: {
        en: "<@{{user}}> bonks <@{{targetUser}}>!",
        ru: "<@{{user}}> —Å—Ç—É–∫–∞–µ—Ç <@{{targetUser}}>!",
        uk: "<@{{user}}> —Å—Ç—É–∫–∞—î <@{{targetUser}}>!",
      },
    },
    punch: {
      title: {
        en: "Punch",
        ru: "–£–¥–∞—Ä",
        uk: "–£–¥–∞—Ä",
      },
      description: {
        en: "<@{{user}}> punches <@{{targetUser}}>!",
        ru: "<@{{user}}> –±—å–µ—Ç <@{{targetUser}}>!",
        uk: "<@{{user}}> –±'—î <@{{targetUser}}>!",
      },
    },
    poke: {
      title: {
        en: "Poke",
        ru: "–¢—ã–∫",
        uk: "–¢—ã–∫",
      },
      description: {
        en: "<@{{user}}> pokes <@{{targetUser}}>!",
        ru: "<@{{user}}> —Ç—ã–∫–∞–µ—Ç <@{{targetUser}}>!",
        uk: "<@{{user}}> —Ç–∏–∫–∞—î <@{{targetUser}}>!",
      },
    },
    bully: {
      title: {
        en: "Bully",
        ru: "–ò–∑–¥–µ–≤–∞–Ω–∏–µ",
        uk: "–ó–Ω—É—â–∞–Ω–Ω—è",
      },
      description: {
        en: "<@{{user}}> bullies <@{{targetUser}}>!",
        ru: "<@{{user}}> –∏–∑–¥–µ–≤–∞–µ—Ç—Å—è –Ω–∞–¥ <@{{targetUser}}>!",
        uk: "<@{{user}}> –∑–Ω—É—â–∞—î—Ç—å—Å—è –∑ <@{{targetUser}}>!",
      },
    },
    kick: {
      title: {
        en: "Kick",
        ru: "–ü–∏–Ω–∞–Ω–∏–µ",
        uk: "–ü–∏–Ω–∞—î",
      },
      description: {
        en: "<@{{user}}> kicks <@{{targetUser}}>!",
        ru: "<@{{user}}> –ø–∏–Ω–∞–µ—Ç <@{{targetUser}}>!",
        uk: "<@{{user}}> –±'—î –Ω–æ–≥–æ—é <@{{targetUser}}>!",
      },
    },
    slap: {
      title: {
        en: "Slap",
        ru: "–®–ª–µ–ø",
        uk: "–®–ª–µ–ø",
      },
      description: {
        en: "<@{{user}}> slaps <@{{targetUser}}>!",
        ru: "<@{{user}}> —à–ª–µ–ø–∞–µ—Ç <@{{targetUser}}>!",
        uk: "<@{{user}}> –ª—è–ø–∞—î <@{{targetUser}}>!",
      },
    },
    throw: {
      title: {
        en: "Throw",
        ru: "–ë—Ä–æ—Å–æ–∫",
        uk: "–ö–∏–¥–æ–∫",
      },
      description: {
        en: "<@{{user}}> throws something at <@{{targetUser}}>!",
        ru: "<@{{user}}> –±—Ä–æ—Å–∞–µ—Ç —á—Ç–æ-—Ç–æ –≤ <@{{targetUser}}>!",
        uk: "<@{{user}}> –∫–∏–¥–∞—î —â–æ—Å—å —É <@{{targetUser}}>!",
      },
    },
    bite: {
      title: {
        en: "Bite",
        ru: "–ö—É—Å–∞–Ω–∏–µ",
        uk: "–ö—É—Å–∞—î",
      },
      description: {
        en: "<@{{user}}> bites <@{{targetUser}}>!",
        ru: "<@{{user}}> –∫—É—Å–∞–µ—Ç <@{{targetUser}}>!",
        uk: "<@{{user}}> –∫—É—Å–∞—î <@{{targetUser}}>!",
      },
    },
    kill: {
      title: {
        en: "Kill",
        ru: "–£–±–∏–π—Å—Ç–≤–æ",
        uk: "–£–±–∏–≤—Å—Ç–≤–æ",
      },
      description: {
        en: "<@{{user}}> kills <@{{targetUser}}>!",
        ru: "<@{{user}}> —É–±–∏–≤–∞–µ—Ç <@{{targetUser}}>!",
        uk: "<@{{user}}> –≤–±–∏–≤–∞—î <@{{targetUser}}>!",
      },
    },
    threaten: {
      title: {
        en: "Threaten",
        ru: "–£–≥—Ä–æ–∑–∞",
        uk: "–ü–æ–≥—Ä–æ–∑–∞",
      },
      description: {
        en: "<@{{user}}> threatens <@{{targetUser}}>!",
        ru: "<@{{user}}> —É–≥—Ä–æ–∂–∞–µ—Ç <@{{targetUser}}>!",
        uk: "<@{{user}}> –ø–æ–≥—Ä–æ–∂—É—î <@{{targetUser}}>!",
      },
    },
    tickle: {
      title: {
        en: "Tickle",
        ru: "–©–µ–∫–æ—Ç–∞–Ω–∏–µ",
        uk: "–õ–æ—Å–∫–æ—á–µ",
      },
      description: {
        en: "<@{{user}}> tickles <@{{targetUser}}>!",
        ru: "<@{{user}}> —â–µ–∫–æ—á–µ—Ç <@{{targetUser}}>!",
        uk: "<@{{user}}> –ª–æ—Å–∫–æ—á–µ <@{{targetUser}}>!",
      },
    },
    imageNotFound: {
      en: "Image not found",
      ru: "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
      uk: "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
    },
    cannotSelectSelf: {
      en: "You cannot select yourself",
      ru: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–µ–±—è",
      uk: "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ —Å–µ–±–µ",
    },
    cannotSelectBot: {
      en: "You cannot select a bot",
      ru: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –±–æ—Ç–∞",
      uk: "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ –±–æ—Ç–∞",
    },
  },
};
