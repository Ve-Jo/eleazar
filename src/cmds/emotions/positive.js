import {
  SlashCommandSubcommand,
  SlashCommandOption,
  OptionType,
  I18nCommandBuilder,
} from "../../utils/builders/index.js";
import {
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  ComponentType,
} from "discord.js";
import HMFull from "hmfull";
import i18n from "../../utils/i18n.js";

const positiveEmotions = Object.fromEntries(
  [
    "wave",
    "wink",
    "pat",
    "kiss",
    "feed",
    "hug",
    "cuddle",
    "five",
    "glomp",
    "hold",
    "boop",
  ].map((key) => [key, key])
);

export default {
  data: () => {
    const i18nBuilder = new I18nCommandBuilder("emotions", "positive");

    const subcommand = new SlashCommandSubcommand({
      name: i18nBuilder.getSimpleName(i18nBuilder.translate("name")),
      description: i18nBuilder.translate("description"),
      name_localizations: i18nBuilder.getLocalizations("name"),
      description_localizations: i18nBuilder.getLocalizations("description"),
    });

    // Add emotion option
    const emotionOption = new SlashCommandOption({
      type: OptionType.STRING,
      name: "emotion",
      description: i18nBuilder.translateOption("emotion", "description"),
      required: true,
      name_localizations: i18nBuilder.getOptionLocalizations("emotion", "name"),
      description_localizations: i18nBuilder.getOptionLocalizations(
        "emotion",
        "description"
      ),
      choices: Object.entries(positiveEmotions).map(([name]) => ({
        name,
        value: name,
      })),
    });

    // Add user option
    const userOption = new SlashCommandOption({
      type: OptionType.USER,
      name: "user",
      description: i18nBuilder.translateOption("user", "description"),
      required: true,
      name_localizations: i18nBuilder.getOptionLocalizations("user", "name"),
      description_localizations: i18nBuilder.getOptionLocalizations(
        "user",
        "description"
      ),
    });

    subcommand.addOption(emotionOption);
    subcommand.addOption(userOption);

    return subcommand;
  },
  async execute(interaction) {
    const emotion = interaction.options.getString("emotion");
    const targetUser = interaction.options.getUser("user");

    if (targetUser.id === interaction.user.id) {
      return interaction.reply({
        content: i18n.__("cannotSelectSelf"),
        ephemeral: true,
      });
    }

    if (targetUser.bot) {
      return interaction.reply({
        content: i18n.__("cannotSelectBot"),
        ephemeral: true,
      });
    }

    async function getValidImageUrl() {
      const sources = [
        HMFull.HMtai.sfw,
        HMFull.Nekos.sfw,
        HMFull.NekoBot.sfw,
        HMFull.NekoLove.sfw,
      ];

      for (let attempts = 0; attempts < 3; attempts++) {
        for (const source of sources) {
          if (Object.keys(source).includes(emotion)) {
            let imageUrl = await source[emotion]();
            if (typeof imageUrl === "object" && imageUrl.url) {
              imageUrl = imageUrl.url;
            }
            if (
              imageUrl &&
              typeof imageUrl === "string" &&
              imageUrl.startsWith("http")
            ) {
              return imageUrl;
            }
          }
        }
      }
      return null;
    }

    async function createEmbed() {
      const imageUrl = await getValidImageUrl();

      if (!imageUrl) {
        return null;
      }

      return new EmbedBuilder()
        .setColor(process.env.EMBED_COLOR)
        .setTitle(i18n.__(`emotions.positive.${emotion}.title`))
        .setDescription(
          i18n.__(`emotions.positive.${emotion}.description`, {
            user: interaction.user,
            targetUser: targetUser,
          })
        )
        .setImage(imageUrl)
        .setFooter({
          text: interaction.user.displayName,
          iconURL: interaction.user.displayAvatarURL(),
        });
    }

    const initialEmbed = await createEmbed();

    if (!initialEmbed) {
      return interaction.reply({
        content: i18n.__("imageNotFound"),
        ephemeral: true,
      });
    }

    const row = new ActionRowBuilder().addComponents(
      new ButtonBuilder()
        .setCustomId("retry")
        .setEmoji("üîÑ")
        .setStyle(ButtonStyle.Primary)
    );

    const response = await interaction.reply({
      embeds: [initialEmbed],
      components: [row],
    });

    const collector = response.createMessageComponentCollector({
      filter: (i) => i.user.id === interaction.user.id,
      componentType: ComponentType.Button,
      idle: 60000,
    });

    collector.on("collect", async (i) => {
      if (i.customId === "retry") {
        const newEmbed = await createEmbed();
        if (newEmbed) {
          await i.update({ embeds: [newEmbed], components: [row] });
        } else {
          await i.reply({
            content: i18n.__("imageNotFound"),
            ephemeral: true,
          });
        }
      }
    });

    collector.on("end", () => {
      row.components[0].setDisabled(true);
      interaction.editReply({ components: [row] }).catch(console.error);
    });
  },
  localization_strings: {
    name: {
      en: "positive",
      ru: "–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ",
      uk: "–ø–æ–∑–∏—Ç–∏–≤–Ω—ñ",
    },
    description: {
      en: "Choose a positive emotion with a user",
      ru: "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—É—é —ç–º–æ—Ü–∏—é —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
      uk: "–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω—É –µ–º–æ—Ü—ñ—é –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º",
    },
    options: {
      emotion: {
        name: {
          en: "emotion",
          ru: "—ç–º–æ—Ü–∏—è",
          uk: "–µ–º–æ—Ü—ñ—è",
        },
        description: {
          en: "Choose an emotion",
          ru: "–í—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ—Ü–∏—é",
          uk: "–í–∏–±–µ—Ä—ñ—Ç—å –µ–º–æ—Ü—ñ—é",
        },
      },
      user: {
        name: {
          en: "user",
          ru: "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
          uk: "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á",
        },
        description: {
          en: "Choose a user",
          ru: "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
          uk: "–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
        },
      },
    },
    wave: {
      title: {
        en: "Wave",
        ru: "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
        uk: "–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è",
      },
      description: {
        en: "<@{{user}}> waves at <@{{targetUser}}>!",
        ru: "<@{{user}}> –º–∞—à–µ—Ç <@{{targetUser}}>!",
        uk: "<@{{user}}> –º–∞—Ö–∞—î <@{{targetUser}}>!",
      },
    },
    wink: {
      title: {
        en: "Wink",
        ru: "–ü–æ–¥–º–∏–≥–∏–≤–∞–Ω–∏–µ",
        uk: "–ü—ñ–¥–º–æ—Ä–≥—É–≤–∞–Ω–Ω—è",
      },
      description: {
        en: "<@{{user}}> winks at <@{{targetUser}}>!",
        ru: "<@{{user}}> –ø–æ–¥–º–∏–≥–∏–≤–∞–µ—Ç <@{{targetUser}}>!",
        uk: "<@{{user}}> –ø—ñ–¥–º–æ—Ä–≥—É—î <@{{targetUser}}>!",
      },
    },
    pat: {
      title: {
        en: "Pat",
        ru: "–ü–æ–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ",
        uk: "–ü–æ–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è",
      },
      description: {
        en: "<@{{user}}> pats <@{{targetUser}}>!",
        ru: "<@{{user}}> –≥–ª–∞–¥–∏—Ç <@{{targetUser}}>!",
        uk: "<@{{user}}> –≥–ª–∞–¥–∏—Ç—å <@{{targetUser}}>!",
      },
    },
    kiss: {
      title: {
        en: "Kiss",
        ru: "–ü–æ—Ü–µ–ª—É–π",
        uk: "–ü–æ—Ü—ñ–ª—É–Ω–æ–∫",
      },
      description: {
        en: "<@{{user}}> kisses <@{{targetUser}}>!",
        ru: "<@{{user}}> —Ü–µ–ª—É–µ—Ç <@{{targetUser}}>!",
        uk: "<@{{user}}> —Ü—ñ–ª—É—î <@{{targetUser}}>!",
      },
    },
    feed: {
      title: {
        en: "Feed",
        ru: "–ö–æ—Ä–º–ª–µ–Ω–∏–µ",
        uk: "–ì–æ–¥—É–≤–∞–Ω–Ω—è",
      },
      description: {
        en: "<@{{user}}> feeds <@{{targetUser}}>!",
        ru: "<@{{user}}> –∫–æ—Ä–º–∏—Ç <@{{targetUser}}>!",
        uk: "<@{{user}}> –≥–æ–¥—É—î <@{{targetUser}}>!",
      },
    },
    hug: {
      title: {
        en: "Hug",
        ru: "–û–±—ä—è—Ç–∏–µ",
        uk: "–û–±—ñ–π–º–∏",
      },
      description: {
        en: "<@{{user}}> hugs <@{{targetUser}}>!",
        ru: "<@{{user}}> –æ–±–Ω–∏–º–∞–µ—Ç <@{{targetUser}}>!",
        uk: "<@{{user}}> –æ–±—ñ–π–º–∞—î <@{{targetUser}}>!",
      },
    },
    cuddle: {
      title: {
        en: "Cuddle",
        ru: "–ü—Ä–∏–∂–∏–º–∞–Ω–∏–µ",
        uk: "–ü—Ä–∏—Ç–∏—Å–∫–∞–Ω–Ω—è",
      },
      description: {
        en: "<@{{user}}> cuddles with <@{{targetUser}}>!",
        ru: "<@{{user}}> –ø—Ä–∏–∂–∏–º–∞–µ—Ç—Å—è –∫ <@{{targetUser}}>!",
        uk: "<@{{user}}> –ø—Ä–∏—Ç–∏—Å–∫–∞—î—Ç—å—Å—è –¥–æ <@{{targetUser}}>!",
      },
    },
    five: {
      title: {
        en: "High Five",
        ru: "–î–∞—Ç—å –ø—è—Ç—å",
        uk: "–î–∞—Ç–∏ –ø'—è—Ç—å",
      },
      description: {
        en: "<@{{user}}> high fives <@{{targetUser}}>!",
        ru: "<@{{user}}> –¥–∞–µ—Ç –ø—è—Ç—å <@{{targetUser}}>!",
        uk: "<@{{user}}> –¥–∞—î –ø'—è—Ç—å <@{{targetUser}}>!",
      },
    },
    glomp: {
      title: {
        en: "Glomp",
        ru: "–¢–∏—Å–∫–∞–Ω–∏–µ",
        uk: "–°—Ç–∏—Å–∫–∞–Ω–Ω—è",
      },
      description: {
        en: "<@{{user}}> glomps <@{{targetUser}}>!",
        ru: "<@{{user}}> —Ç–∏—Å–∫–∞–µ—Ç <@{{targetUser}}>!",
        uk: "<@{{user}}> —Å—Ç–∏—Å–∫–∞—î <@{{targetUser}}>!",
      },
    },
    hold: {
      title: {
        en: "Hold",
        ru: "–î–µ—Ä–∂–∞–Ω–∏–µ –∑–∞ —Ä—É–∫—É",
        uk: "–¢—Ä–∏–º–∞–Ω–Ω—è –∑–∞ —Ä—É–∫—É",
      },
      description: {
        en: "<@{{user}}> holds hands with <@{{targetUser}}>!",
        ru: "<@{{user}}> –¥–µ—Ä–∂–∏—Ç –∑–∞ —Ä—É–∫—É <@{{targetUser}}>!",
        uk: "<@{{user}}> —Ç—Ä–∏–º–∞—î –∑–∞ —Ä—É–∫—É <@{{targetUser}}>!",
      },
    },
    boop: {
      title: {
        en: "Boop",
        ru: "–¢—ã–∫ –≤ –Ω–æ—Å",
        uk: "–¢–∏–∫ —É –Ω—ñ—Å",
      },
      description: {
        en: "<@{{user}}> boops <@{{targetUser}}>!",
        ru: "<@{{user}}> —Ç—ã–∫–∞–µ—Ç –≤ –Ω–æ—Å <@{{targetUser}}>!",
        uk: "<@{{user}}> —Ç–∏–∫–∞—î –≤ –Ω—ñ—Å <@{{targetUser}}>!",
      },
    },
  },
};
