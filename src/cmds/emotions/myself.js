import {
  SlashCommandSubcommand,
  SlashCommandOption,
  OptionType,
  I18nCommandBuilder,
} from "../../utils/builders/index.js";
import {
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  ComponentType,
} from "discord.js";
import HMFull from "hmfull";

export default {
  data: () => {
    const i18nBuilder = new I18nCommandBuilder("emotions", "myself");

    const subcommand = new SlashCommandSubcommand({
      name: i18nBuilder.getSimpleName(i18nBuilder.translate("name")),
      description: i18nBuilder.translate("description"),
      name_localizations: i18nBuilder.getLocalizations("name"),
      description_localizations: i18nBuilder.getLocalizations("description"),
    });

    // Add emotion option
    const emotionOption = new SlashCommandOption({
      type: OptionType.STRING,
      name: "emotion",
      description: i18nBuilder.translateOption("emotion", "description"),
      required: true,
      name_localizations: i18nBuilder.getOptionLocalizations("emotion", "name"),
      description_localizations: i18nBuilder.getOptionLocalizations(
        "emotion",
        "description"
      ),
      choices: [
        { name: "blush", value: "blush" },
        { name: "smug", value: "smug" },
        { name: "happy", value: "happy" },
        { name: "smile", value: "smile" },
        { name: "dance", value: "dance" },
        { name: "like", value: "like" },
        { name: "cry", value: "cry" },
        { name: "nosebleed", value: "nosebleed" },
        { name: "depression", value: "depression" },
        { name: "tea", value: "tea" },
        { name: "nom", value: "nom" },
        { name: "lick", value: "lick" },
        { name: "sleep", value: "sleep" },
        { name: "coffee", value: "coffee" },
        { name: "gah", value: "gah" },
      ],
    });

    subcommand.addOption(emotionOption);

    return subcommand;
  },
  async execute(interaction, i18n) {
    const emotion = interaction.options.getString("emotion");

    async function getValidImageUrl() {
      const sources = [
        HMFull.HMtai.sfw,
        HMFull.Nekos.sfw,
        HMFull.NekoBot.sfw,
        HMFull.NekoLove.sfw,
      ];

      for (let attempts = 0; attempts < 3; attempts++) {
        for (const source of sources) {
          if (Object.keys(source).includes(emotion)) {
            let imageUrl = await source[emotion]();
            if (typeof imageUrl === "object" && imageUrl.url) {
              imageUrl = imageUrl.url;
            }
            if (
              imageUrl &&
              typeof imageUrl === "string" &&
              imageUrl.startsWith("http")
            ) {
              return imageUrl;
            }
          }
        }
      }
      return null;
    }

    async function createEmbed() {
      const imageUrl = await getValidImageUrl();

      if (!imageUrl) {
        return null;
      }

      return new EmbedBuilder()
        .setColor(process.env.EMBED_COLOR)
        .setTitle(i18n.__(`emotions.myself.${emotion}.title`))
        .setDescription(
          i18n.__(`emotions.myself.${emotion}.description`, {
            user: interaction.user.id,
          })
        )
        .setImage(imageUrl)
        .setFooter({
          text: interaction.user.displayName,
          iconURL: interaction.user.displayAvatarURL(),
        });
    }

    const initialEmbed = await createEmbed();

    if (!initialEmbed) {
      return interaction.reply({
        content: i18n.__("imageNotFound"),
        ephemeral: true,
      });
    }

    const row = new ActionRowBuilder().addComponents(
      new ButtonBuilder()
        .setCustomId("retry")
        .setEmoji("üîÑ")
        .setStyle(ButtonStyle.Primary)
    );

    const response = await interaction.reply({
      embeds: [initialEmbed],
      components: [row],
    });

    const collector = response.createMessageComponentCollector({
      filter: (i) => i.user.id === interaction.user.id,
      componentType: ComponentType.Button,
      idle: 60000,
    });

    collector.on("collect", async (i) => {
      if (i.customId === "retry") {
        const newEmbed = await createEmbed();
        if (newEmbed) {
          await i.update({ embeds: [newEmbed], components: [row] });
        } else {
          await i.reply({
            content: i18n.__("imageNotFound"),
            ephemeral: true,
          });
        }
      }
    });

    collector.on("end", () => {
      row.components[0].setDisabled(true);
      interaction.editReply({ components: [row] }).catch(console.error);
    });
  },
  localization_strings: {
    name: {
      en: "myself",
      ru: "—è",
      uk: "—è",
    },
    description: {
      en: "Choose your own emotion or action",
      ru: "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —ç–º–æ—Ü–∏—é –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ",
      uk: "–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –µ–º–æ—Ü—ñ—é –∞–±–æ –¥—ñ—é",
    },
    options: {
      emotion: {
        name: {
          en: "emotion",
          ru: "—ç–º–æ—Ü–∏—è",
          uk: "–µ–º–æ—Ü—ñ—è",
        },
        description: {
          en: "Choose an emotion or action",
          ru: "–í—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ—Ü–∏—é –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ",
          uk: "–í–∏–±–µ—Ä—ñ—Ç—å –µ–º–æ—Ü—ñ—é –∞–±–æ –¥—ñ—é",
        },
      },
    },
    blush: {
      title: {
        en: "Blush",
        ru: "–°–º—É—â–µ–Ω–∏–µ",
        uk: "–ó–Ω—ñ—è–∫–æ–≤—ñ–Ω–Ω—è",
      },
      description: {
        en: "<@{{user}}> is blushing!",
        ru: "<@{{user}}> —Å–º—É—â–∞–µ—Ç—Å—è!",
        uk: "<@{{user}}> –Ω—ñ—è–∫–æ–≤—ñ—î!",
      },
    },
    smug: {
      title: {
        en: "Smug",
        ru: "–°–∞–º–æ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ",
        uk: "–°–∞–º–æ–≤–¥–æ–≤–æ–ª–µ–Ω–Ω—è",
      },
      description: {
        en: "<@{{user}}> looks smug!",
        ru: "<@{{user}}> –≤—ã–≥–ª—è–¥–∏—Ç —Å–∞–º–æ–¥–æ–≤–æ–ª—å–Ω–æ!",
        uk: "<@{{user}}> –≤–∏–≥–ª—è–¥–∞—î —Å–∞–º–æ–≤–¥–æ–≤–æ–ª–µ–Ω–æ!",
      },
    },
    happy: {
      title: {
        en: "Happy",
        ru: "–†–∞–¥–æ—Å—Ç—å",
        uk: "–†–∞–¥—ñ—Å—Ç—å",
      },
      description: {
        en: "<@{{user}}> is happy!",
        ru: "<@{{user}}> —Ä–∞–¥—É–µ—Ç—Å—è!",
        uk: "<@{{user}}> —Ä–∞–¥—ñ—î!",
      },
    },
    smile: {
      title: {
        en: "Smile",
        ru: "–£–ª—ã–±–∫–∞",
        uk: "–ü–æ—Å–º—ñ—à–∫–∞",
      },
      description: {
        en: "<@{{user}}> smiles!",
        ru: "<@{{user}}> —É–ª—ã–±–∞–µ—Ç—Å—è!",
        uk: "<@{{user}}> –ø–æ—Å–º—ñ—Ö–∞—î—Ç—å—Å—è!",
      },
    },
    dance: {
      title: {
        en: "Dance",
        ru: "–¢–∞–Ω–µ—Ü",
        uk: "–¢–∞–Ω–µ—Ü—å",
      },
      description: {
        en: "<@{{user}}> is dancing!",
        ru: "<@{{user}}> —Ç–∞–Ω—Ü—É–µ—Ç!",
        uk: "<@{{user}}> —Ç–∞–Ω—Ü—é—î!",
      },
    },
    like: {
      title: {
        en: "Like",
        ru: "–ù—Ä–∞–≤–∏—Ç—Å—è",
        uk: "–ü–æ–¥–æ–±–∞—î—Ç—å—Å—è",
      },
      description: {
        en: "<@{{user}}> likes this!",
        ru: "<@{{user}}> —ç—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è!",
        uk: "<@{{user}}> —Ü–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è!",
      },
    },
    cry: {
      title: {
        en: "Cry",
        ru: "–ü–ª–∞—á",
        uk: "–ü–ª–∞—á",
      },
      description: {
        en: "<@{{user}}> is crying!",
        ru: "<@{{user}}> –ø–ª–∞—á–µ—Ç!",
        uk: "<@{{user}}> –ø–ª–∞—á–µ!",
      },
    },
    nosebleed: {
      title: {
        en: "Nosebleed",
        ru: "–ö—Ä–æ–≤—å –∏–∑ –Ω–æ—Å–∞",
        uk: "–ö—Ä–æ–≤ –∑ –Ω–æ—Å–∞",
      },
      description: {
        en: "<@{{user}}> has a nosebleed!",
        ru: "–£ <@{{user}}> –∏–¥–µ—Ç –∫—Ä–æ–≤—å –∏–∑ –Ω–æ—Å–∞!",
        uk: "–£ <@{{user}}> –π–¥–µ –∫—Ä–æ–≤ –∑ –Ω–æ—Å–∞!",
      },
    },
    depression: {
      title: {
        en: "Depression",
        ru: "–î–µ–ø—Ä–µ—Å—Å–∏—è",
        uk: "–î–µ–ø—Ä–µ—Å—ñ—è",
      },
      description: {
        en: "<@{{user}}> is depressed!",
        ru: "<@{{user}}> –≤ –¥–µ–ø—Ä–µ—Å—Å–∏–∏!",
        uk: "<@{{user}}> —É –¥–µ–ø—Ä–µ—Å—ñ—ó!",
      },
    },
    tea: {
      title: {
        en: "Tea",
        ru: "–ß–∞–π",
        uk: "–ß–∞–π",
      },
      description: {
        en: "<@{{user}}> drinks tea!",
        ru: "<@{{user}}> –ø—å–µ—Ç —á–∞–π!",
        uk: "<@{{user}}> –ø'—î —á–∞–π!",
      },
    },
    nom: {
      title: {
        en: "Nom",
        ru: "–ù—è–º",
        uk: "–ù—è–º",
      },
      description: {
        en: "<@{{user}}> is eating!",
        ru: "<@{{user}}> –∫—É—à–∞–µ—Ç!",
        uk: "<@{{user}}> —ó—Å—Ç—å!",
      },
    },
    lick: {
      title: {
        en: "Lick",
        ru: "–û–±–ª–∏–∑—ã–≤–∞–Ω–∏–µ",
        uk: "–û–±–ª–∏–∑—É–≤–∞–Ω–Ω—è",
      },
      description: {
        en: "<@{{user}}> licks their lips!",
        ru: "<@{{user}}> –æ–±–ª–∏–∑—ã–≤–∞–µ—Ç—Å—è!",
        uk: "<@{{user}}> –æ–±–ª–∏–∑—É—î—Ç—å—Å—è!",
      },
    },
    sleep: {
      title: {
        en: "Sleep",
        ru: "–°–æ–Ω",
        uk: "–°–æ–Ω",
      },
      description: {
        en: "<@{{user}}> is sleeping!",
        ru: "<@{{user}}> —Å–ø–∏—Ç!",
        uk: "<@{{user}}> —Å–ø–∏—Ç—å!",
      },
    },
    coffee: {
      title: {
        en: "Coffee",
        ru: "–ö–æ—Ñ–µ",
        uk: "–ö–∞–≤–∞",
      },
      description: {
        en: "<@{{user}}> drinks coffee!",
        ru: "<@{{user}}> –ø—å–µ—Ç –∫–æ—Ñ–µ!",
        uk: "<@{{user}}> –ø'—î –∫–∞–≤—É!",
      },
    },
    gah: {
      title: {
        en: "Gah",
        ru: "–ì–∞—Ö",
        uk: "–ì–∞—Ö",
      },
      description: {
        en: "<@{{user}}> is surprised!",
        ru: "<@{{user}}> —É–¥–∏–≤–ª–µ–Ω!",
        uk: "<@{{user}}> –∑–¥–∏–≤–æ–≤–∞–Ω–∏–π!",
      },
    },
  },
};
