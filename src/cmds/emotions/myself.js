import {
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  SlashCommandSubcommandBuilder,
  MessageFlags,
} from "discord.js";
import HMFull from "hmfull";
import { ComponentBuilder } from "../../utils/componentConverter.js";

export default {
  data: () => {
    const builder = new SlashCommandSubcommandBuilder()
      .setName("myself")
      .setDescription("Choose your own emotion or action")
      .addStringOption((option) =>
        option
          .setName("emotion")
          .setDescription("Choose an emotion or action")
          .setRequired(true)
          .addChoices(
            { name: "blush", value: "blush" },
            { name: "smug", value: "smug" },
            { name: "happy", value: "happy" },
            { name: "smile", value: "smile" },
            { name: "dance", value: "dance" },
            { name: "like", value: "like" },
            { name: "cry", value: "cry" },
            { name: "nosebleed", value: "nosebleed" },
            { name: "depression", value: "depression" },
            { name: "tea", value: "tea" },
            { name: "nom", value: "nom" },
            { name: "lick", value: "lick" },
            { name: "sleep", value: "sleep" },
            { name: "coffee", value: "coffee" },
            { name: "gah", value: "gah" }
          )
      );

    return builder;
  },

  localization_strings: {
    command: {
      name: {
        ru: "—è",
        uk: "—è",
      },
      description: {
        ru: "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —ç–º–æ—Ü–∏—é –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ",
        uk: "–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –µ–º–æ—Ü—ñ—é –∞–±–æ –¥—ñ—é",
      },
    },
    blush: {
      title: {
        en: "Blush",
        ru: "–°–º—É—â–µ–Ω–∏–µ",
        uk: "–ó–Ω—ñ—è–∫–æ–≤—ñ–Ω–Ω—è",
      },
      description: {
        en: "<@{{user}}> is blushing!",
        ru: "<@{{user}}> —Å–º—É—â–∞–µ—Ç—Å—è!",
        uk: "<@{{user}}> –Ω—ñ—è–∫–æ–≤—ñ—î!",
      },
    },
    smug: {
      title: {
        en: "Smug",
        ru: "–°–∞–º–æ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ",
        uk: "–°–∞–º–æ–≤–¥–æ–≤–æ–ª–µ–Ω–Ω—è",
      },
      description: {
        en: "<@{{user}}> looks smug!",
        ru: "<@{{user}}> –≤—ã–≥–ª—è–¥–∏—Ç —Å–∞–º–æ–¥–æ–≤–æ–ª—å–Ω–æ!",
        uk: "<@{{user}}> –≤–∏–≥–ª—è–¥–∞—î —Å–∞–º–æ–≤–¥–æ–≤–æ–ª–µ–Ω–æ!",
      },
    },
    happy: {
      title: {
        en: "Happy",
        ru: "–†–∞–¥–æ—Å—Ç—å",
        uk: "–†–∞–¥—ñ—Å—Ç—å",
      },
      description: {
        en: "<@{{user}}> is happy!",
        ru: "<@{{user}}> —Ä–∞–¥—É–µ—Ç—Å—è!",
        uk: "<@{{user}}> —Ä–∞–¥—ñ—î!",
      },
    },
    smile: {
      title: {
        en: "Smile",
        ru: "–£–ª—ã–±–∫–∞",
        uk: "–ü–æ—Å–º—ñ—à–∫–∞",
      },
      description: {
        en: "<@{{user}}> smiles!",
        ru: "<@{{user}}> —É–ª—ã–±–∞–µ—Ç—Å—è!",
        uk: "<@{{user}}> –ø–æ—Å–º—ñ—Ö–∞—î—Ç—å—Å—è!",
      },
    },
    dance: {
      title: {
        en: "Dance",
        ru: "–¢–∞–Ω–µ—Ü",
        uk: "–¢–∞–Ω–µ—Ü—å",
      },
      description: {
        en: "<@{{user}}> is dancing!",
        ru: "<@{{user}}> —Ç–∞–Ω—Ü—É–µ—Ç!",
        uk: "<@{{user}}> —Ç–∞–Ω—Ü—é—î!",
      },
    },
    like: {
      title: {
        en: "Like",
        ru: "–ù—Ä–∞–≤–∏—Ç—Å—è",
        uk: "–ü–æ–¥–æ–±–∞—î—Ç—å—Å—è",
      },
      description: {
        en: "<@{{user}}> likes this!",
        ru: "<@{{user}}> —ç—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è!",
        uk: "<@{{user}}> —Ü–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è!",
      },
    },
    cry: {
      title: {
        en: "Cry",
        ru: "–ü–ª–∞—á",
        uk: "–ü–ª–∞—á",
      },
      description: {
        en: "<@{{user}}> is crying!",
        ru: "<@{{user}}> –ø–ª–∞—á–µ—Ç!",
        uk: "<@{{user}}> –ø–ª–∞—á–µ!",
      },
    },
    nosebleed: {
      title: {
        en: "Nosebleed",
        ru: "–ö—Ä–æ–≤—å –∏–∑ –Ω–æ—Å–∞",
        uk: "–ö—Ä–æ–≤ –∑ –Ω–æ—Å–∞",
      },
      description: {
        en: "<@{{user}}> has a nosebleed!",
        ru: "–£ <@{{user}}> –∏–¥–µ—Ç –∫—Ä–æ–≤—å –∏–∑ –Ω–æ—Å–∞!",
        uk: "–£ <@{{user}}> –π–¥–µ –∫—Ä–æ–≤ –∑ –Ω–æ—Å–∞!",
      },
    },
    depression: {
      title: {
        en: "Depression",
        ru: "–î–µ–ø—Ä–µ—Å—Å–∏—è",
        uk: "–î–µ–ø—Ä–µ—Å—ñ—è",
      },
      description: {
        en: "<@{{user}}> is depressed!",
        ru: "<@{{user}}> –≤ –¥–µ–ø—Ä–µ—Å—Å–∏–∏!",
        uk: "<@{{user}}> —É –¥–µ–ø—Ä–µ—Å—ñ—ó!",
      },
    },
    tea: {
      title: {
        en: "Tea",
        ru: "–ß–∞–π",
        uk: "–ß–∞–π",
      },
      description: {
        en: "<@{{user}}> drinks tea!",
        ru: "<@{{user}}> –ø—å–µ—Ç —á–∞–π!",
        uk: "<@{{user}}> –ø'—î —á–∞–π!",
      },
    },
    nom: {
      title: {
        en: "Nom",
        ru: "–ù—è–º",
        uk: "–ù—è–º",
      },
      description: {
        en: "<@{{user}}> is eating!",
        ru: "<@{{user}}> –∫—É—à–∞–µ—Ç!",
        uk: "<@{{user}}> —ó—Å—Ç—å!",
      },
    },
    lick: {
      title: {
        en: "Lick",
        ru: "–û–±–ª–∏–∑—ã–≤–∞–Ω–∏–µ",
        uk: "–û–±–ª–∏–∑—É–≤–∞–Ω–Ω—è",
      },
      description: {
        en: "<@{{user}}> licks their lips!",
        ru: "<@{{user}}> –æ–±–ª–∏–∑—ã–≤–∞–µ—Ç—Å—è!",
        uk: "<@{{user}}> –æ–±–ª–∏–∑—É—î—Ç—å—Å—è!",
      },
    },
    sleep: {
      title: {
        en: "Sleep",
        ru: "–°–æ–Ω",
        uk: "–°–æ–Ω",
      },
      description: {
        en: "<@{{user}}> is sleeping!",
        ru: "<@{{user}}> —Å–ø–∏—Ç!",
        uk: "<@{{user}}> —Å–ø–∏—Ç—å!",
      },
    },
    coffee: {
      title: {
        en: "Coffee",
        ru: "–ö–æ—Ñ–µ",
        uk: "–ö–∞–≤–∞",
      },
      description: {
        en: "<@{{user}}> drinks coffee!",
        ru: "<@{{user}}> –ø—å–µ—Ç –∫–æ—Ñ–µ!",
        uk: "<@{{user}}> –ø'—î –∫–∞–≤—É!",
      },
    },
    gah: {
      title: {
        en: "Gah",
        ru: "–ì–∞—Ö",
        uk: "–ì–∞—Ö",
      },
      description: {
        en: "<@{{user}}> is surprised!",
        ru: "<@{{user}}> —É–¥–∏–≤–ª–µ–Ω!",
        uk: "<@{{user}}> –∑–¥–∏–≤–æ–≤–∞–Ω–∏–π!",
      },
    },
    imageNotFound: {
      en: "Image not found",
      ru: "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
      uk: "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
    },
  },

  async execute(interaction, i18n) {
    await interaction.deferReply();
    const { guild, user } = interaction;
    const emotionType = interaction.options.getString("emotion"); // Get the specified emotion

    // Restore original image fetching logic
    async function getEmotionData() {
      try {
        const sources = [
          HMFull.HMtai.sfw, // Assuming sfw source is appropriate
          HMFull.Nekos.sfw,
          HMFull.NekoBot.sfw,
          HMFull.NekoLove.sfw,
        ];

        for (let attempts = 0; attempts < 3; attempts++) {
          for (const source of sources) {
            if (Object.keys(source).includes(emotionType)) {
              let imageUrl = await source[emotionType]();
              if (typeof imageUrl === "object" && imageUrl.url) {
                imageUrl = imageUrl.url;
              }
              if (
                imageUrl &&
                typeof imageUrl === "string" &&
                imageUrl.startsWith("http")
              ) {
                return {
                  image: imageUrl,
                  category: emotionType,
                  emotion: i18n.__(
                    `commands.emotions.myself.${emotionType}.title`
                  ),
                };
              }
            }
          }
        }
        return null;
      } catch (error) {
        console.error(`Error fetching ${emotionType} image:`, error);
        return null;
      }
    }

    let emotionData = await getEmotionData();

    const generateEmotionMessage = async (options = {}) => {
      const { disableInteractions = false } = options;

      // Validate fetched data
      if (!emotionData || !emotionData.image) {
        console.warn("Invalid or missing image URL for emotion:", emotionType);
        emotionData = await getEmotionData(); // Retry fetch
        if (!emotionData || !emotionData.image) {
          return {
            content: i18n.__("commands.emotions.myself.imageNotFound"),
            components: [],
            ephemeral: true,
          };
        }
      }

      // Use ComponentBuilder directly with the fetched image URL
      const emotionComponent = new ComponentBuilder()
        .setColor(process.env.EMBED_COLOR ?? 0x0099ff)
        .addText(
          i18n.__(
            `commands.emotions.myself.${emotionData.category}.description`,
            {
              user: user.id,
            }
          ) ||
            i18n.__(`commands.emotions.myself.${emotionData.category}.title`),
          "header3"
        )
        .addImage(emotionData.image)
        .addTimestamp(interaction.locale);

      // Define action row (button) but don't add it yet
      const nextButton = new ButtonBuilder()
        .setCustomId("next_emotion")
        .setEmoji("üîÑ")
        .setStyle(ButtonStyle.Primary);

      const buttonRow = new ActionRowBuilder().addComponents(nextButton);

      // Conditionally add the button row
      if (!disableInteractions) {
        emotionComponent.addActionRow(buttonRow);
      }

      return {
        components: [emotionComponent.build()],
        flags: MessageFlags.IsComponentsV2,
      };
    };

    let initialMessageData = await generateEmotionMessage();
    if (initialMessageData.content) {
      return interaction.editReply(initialMessageData);
    }
    const message = await interaction.editReply(initialMessageData);

    const collector = message.createMessageComponentCollector({
      filter: (i) => i.user.id === user.id,
      time: 60000, // 1 minute
    });

    collector.on("collect", async (i) => {
      if (i.customId === "next_emotion") {
        await i.deferUpdate();
        // Fetch new emotion data for the SAME type initially requested
        emotionData = await getEmotionData();
        const newMessageData = await generateEmotionMessage();
        if (newMessageData.content) {
          await i.followUp({ ...newMessageData, ephemeral: true });
        } else {
          await i.editReply(newMessageData);
        }
      }
    });

    collector.on("end", async () => {
      if (message.editable) {
        try {
          const finalMessageData = await generateEmotionMessage({
            disableInteractions: true,
          });
          if (!finalMessageData.content) {
            await message.edit(finalMessageData);
          }
        } catch (error) {
          console.error("Error updating components on end:", error);
          await message.edit({ components: [] }).catch(() => {});
        }
      }
    });
  },
};
