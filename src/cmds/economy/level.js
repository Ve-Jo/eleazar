import {
  EmbedBuilder,
  AttachmentBuilder,
  SlashCommandSubcommandBuilder,
} from "discord.js";
import Database from "../../database/client.js";
import { generateImage } from "../../utils/imageGenerator.js";
import i18n from "../../utils/newI18n.js";

export default {
  data: () => {
    const builder = new SlashCommandSubcommandBuilder()
      .setName("level")
      .setDescription("View your XP level or someone else's")
      .addUserOption((option) =>
        option
          .setName("user")
          .setDescription("User to check")
          .setRequired(false)
      );

    return builder;
  },

  localization_strings: {
    command: {
      name: {
        ru: "—É—Ä–æ–≤–µ–Ω—å",
        uk: "—Ä—ñ–≤–µ–Ω—å",
      },
      description: {
        ru: "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å XP –∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        uk: "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤—ñ–π —Ä—ñ–≤–µ–Ω—å XP –∞–±–æ —Ä—ñ–≤–µ–Ω—å —ñ–Ω—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
      },
    },
    options: {
      user: {
        name: {
          ru: "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
          uk: "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á",
        },
        description: {
          ru: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
          uk: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏",
        },
      },
    },
    title: {
      en: "Level",
      ru: "–£—Ä–æ–≤–µ–Ω—å",
      uk: "–†—ñ–≤–µ–Ω—å",
    },
    level: {
      en: "Level",
      ru: "–£—Ä–æ–≤–µ–Ω—å",
      uk: "–†—ñ–≤–µ–Ω—å",
    },
    nextLevel: {
      en: "Next level",
      ru: "–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å",
      uk: "–ù–∞—Å—Ç—É–ø–Ω–∏–π —Ä—ñ–≤–µ–Ω—å",
    },
    xp: {
      en: "XP",
      ru: "XP",
      uk: "XP",
    },
  },

  async execute(interaction) {
    await interaction.deferReply();

    try {
      const user = interaction.options.getMember("user") || interaction.member;

      const userData = await Database.getUser(
        interaction.guild.id,
        user.id,
        true
      );

      if (!userData) {
        return interaction.editReply({
          content: i18n.__("commands.economy.level.userNotFound"),
          ephemeral: true,
        });
      }

      // Generate level card image using the imageGenerator
      const [buffer, dominantColor] = await generateImage(
        "Level2",
        {
          interaction: {
            user: {
              id: user.id,
              username: user.username,
              displayName: user.displayName,
              avatarURL: user.displayAvatarURL({
                extension: "png",
                size: 1024,
              }),
            },
            guild: {
              id: interaction.guild.id,
              name: interaction.guild.name,
              iconURL: interaction.guild.iconURL({
                extension: "png",
                size: 1024,
              }),
            },
          },
          locale: interaction.locale,
          returnDominant: true,
          database: {
            ...userData,
          },
        },
        { image: 2, emoji: 1 }
      );

      if (!buffer) {
        console.error("Buffer is undefined or null");
        return interaction.editReply({
          content: i18n.__("commands.economy.level.imageError"),
          ephemeral: true,
        });
      }

      const attachment = new AttachmentBuilder(buffer, {
        name: `level.png`,
      });

      let embed = new EmbedBuilder()
        .setTimestamp()
        .setColor(dominantColor?.embedColor ?? 0x0099ff)
        .setImage(`attachment://level.png`)
        .setAuthor({
          name: i18n.__("commands.economy.level.title"),
          iconURL: user.avatarURL(),
        });

      await interaction.editReply({
        embeds: [embed],
        files: [attachment],
      });
    } catch (error) {
      console.error("Error in level command:", error);
      await interaction.editReply({
        content: i18n.__("commands.economy.level.error"),
        ephemeral: true,
      });
    }
  },
};

// Helper functions for emojis
function getActivityEmoji(type) {
  switch (type) {
    case "chat":
      return "üí≠";
    case "voice":
      return "üé§";
    default:
      return "‚≠ê";
  }
}

function getGameEmoji(game) {
  switch (game) {
    case "snake":
      return "üêç";
    case "2048":
      return "üé≤";
    default:
      return "üéÆ";
  }
}
